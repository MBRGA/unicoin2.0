/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructures {
  export type ContributionStruct = {
    contributorAddress: PromiseOrValue<string>;
    weighting: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    lifetimeAllocations: PromiseOrValue<BigNumberish>;
  };

  export type ContributionStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    contributorAddress: string;
    weighting: number;
    balance: BigNumber;
    lifetimeAllocations: BigNumber;
  };

  export type CitationStruct = {
    publicationId: PromiseOrValue<BigNumberish>;
    weighting: PromiseOrValue<BigNumberish>;
  };

  export type CitationStructOutput = [BigNumber, number] & {
    publicationId: BigNumber;
    weighting: number;
  };

  export type PublicationStruct = {
    pricingStrategy: PromiseOrValue<BigNumberish>;
    publicationUri: PromiseOrValue<string>;
    publicationStatus: PromiseOrValue<BigNumberish>;
    ownerAddress: PromiseOrValue<string>;
    sellPrice: PromiseOrValue<BigNumberish>;
    maxNumberOfLicences: PromiseOrValue<BigNumberish>;
    licencesIssued: PromiseOrValue<BigNumberish>;
    previousVersion: PromiseOrValue<BigNumberish>;
    auctionIds: PromiseOrValue<BigNumberish>[];
    contributionsId: PromiseOrValue<BigNumberish>;
    donations: PromiseOrValue<BigNumberish>[];
    citationsId: PromiseOrValue<BigNumberish>;
    lifetimeEarnings: PromiseOrValue<BigNumberish>;
  };

  export type PublicationStructOutput = [
    number,
    string,
    number,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    pricingStrategy: number;
    publicationUri: string;
    publicationStatus: number;
    ownerAddress: string;
    sellPrice: BigNumber;
    maxNumberOfLicences: number;
    licencesIssued: BigNumber;
    previousVersion: BigNumber;
    auctionIds: BigNumber[];
    contributionsId: BigNumber;
    donations: BigNumber[];
    citationsId: BigNumber;
    lifetimeEarnings: BigNumber;
  };
}

export interface PublicationManagerInterface extends utils.Interface {
  functions: {
    "GetPublicationPricingStrategy(uint256)": FunctionFragment;
    "_addAuctionToPublication(uint256,uint256)": FunctionFragment;
    "_changeOwner(uint256,address)": FunctionFragment;
    "_citations(uint256,uint256)": FunctionFragment;
    "_contributions(uint256,uint256)": FunctionFragment;
    "_createPublication(uint8,string,address,uint256,uint8,(address,uint16,uint256,uint256)[],(uint256,uint16)[])": FunctionFragment;
    "_getContributors(uint256)": FunctionFragment;
    "_replacePublication(uint256,uint8,string,uint256,uint8,(address,uint16,uint256,uint256)[],(uint256,uint16)[])": FunctionFragment;
    "addNewLicenceToPublication(uint256)": FunctionFragment;
    "getAllPublications(address)": FunctionFragment;
    "getLatestAuctionId(uint256)": FunctionFragment;
    "getOwnerAddress(uint256)": FunctionFragment;
    "getPublication(uint256)": FunctionFragment;
    "getPublicationAuctions(uint256)": FunctionFragment;
    "getPublicationLength()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "publicationOwners(address,uint256)": FunctionFragment;
    "publications(uint256)": FunctionFragment;
    "recordDonation(uint256,uint256)": FunctionFragment;
    "revokeLicence(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GetPublicationPricingStrategy"
      | "_addAuctionToPublication"
      | "_changeOwner"
      | "_citations"
      | "_contributions"
      | "_createPublication"
      | "_getContributors"
      | "_replacePublication"
      | "addNewLicenceToPublication"
      | "getAllPublications"
      | "getLatestAuctionId"
      | "getOwnerAddress"
      | "getPublication"
      | "getPublicationAuctions"
      | "getPublicationLength"
      | "isTrustedForwarder"
      | "publicationOwners"
      | "publications"
      | "recordDonation"
      | "revokeLicence"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GetPublicationPricingStrategy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_addAuctionToPublication",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_changeOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_citations",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_contributions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_createPublication",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SharedStructures.ContributionStruct[],
      SharedStructures.CitationStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getContributors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_replacePublication",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SharedStructures.ContributionStruct[],
      SharedStructures.CitationStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewLicenceToPublication",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPublications",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAuctionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublication",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationAuctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicationOwners",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publications",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordDonation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLicence",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "GetPublicationPricingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_addAuctionToPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_citations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_replacePublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewLicenceToPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPublications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLicence",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewPublication(address,string,uint8)": EventFragment;
    "PublicationOwnerUpdated(address,address,uint256,uint256)": EventFragment;
    "PublicationUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPublication"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicationOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicationUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewPublicationEventObject {
  _publisherAddress: string;
  _publicationUri: string;
  _pricingStrategy: number;
}
export type NewPublicationEvent = TypedEvent<
  [string, string, number],
  NewPublicationEventObject
>;

export type NewPublicationEventFilter = TypedEventFilter<NewPublicationEvent>;

export interface PublicationOwnerUpdatedEventObject {
  oldOwner: string;
  newOwner: string;
  oldPubId: BigNumber;
  newPubId: BigNumber;
}
export type PublicationOwnerUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PublicationOwnerUpdatedEventObject
>;

export type PublicationOwnerUpdatedEventFilter =
  TypedEventFilter<PublicationOwnerUpdatedEvent>;

export interface PublicationUpdatedEventObject {
  _ownerId: string;
  oldPubId: BigNumber;
  newPubId: BigNumber;
}
export type PublicationUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PublicationUpdatedEventObject
>;

export type PublicationUpdatedEventFilter =
  TypedEventFilter<PublicationUpdatedEvent>;

export interface PublicationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PublicationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GetPublicationPricingStrategy(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _citations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { publicationId: BigNumber; weighting: number }
    >;

    _contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        contributorAddress: string;
        weighting: number;
        balance: BigNumber;
        lifetimeAllocations: BigNumber;
      }
    >;

    _createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _ownerAddress: PromiseOrValue<string>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _getContributors(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.ContributionStructOutput[]]>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllPublications(
      _publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLatestAuctionId(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwnerAddress(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.PublicationStructOutput]>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPublicationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    publicationOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publications(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        number,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pricingStrategy: number;
        publicationUri: string;
        publicationStatus: number;
        ownerAddress: string;
        sellPrice: BigNumber;
        maxNumberOfLicences: number;
        licencesIssued: BigNumber;
        previousVersion: BigNumber;
        contributionsId: BigNumber;
        citationsId: BigNumber;
        lifetimeEarnings: BigNumber;
      }
    >;

    recordDonation(
      _publicationId: PromiseOrValue<BigNumberish>,
      _donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLicence(
      _publication_Id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  GetPublicationPricingStrategy(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  _addAuctionToPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _changeOwner(
    publicationId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _citations(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { publicationId: BigNumber; weighting: number }
  >;

  _contributions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber] & {
      contributorAddress: string;
      weighting: number;
      balance: BigNumber;
      lifetimeAllocations: BigNumber;
    }
  >;

  _createPublication(
    _pricingStrategy: PromiseOrValue<BigNumberish>,
    _publicationUri: PromiseOrValue<string>,
    _ownerAddress: PromiseOrValue<string>,
    _fixedSellPrice: PromiseOrValue<BigNumberish>,
    _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
    contributors: SharedStructures.ContributionStruct[],
    citations: SharedStructures.CitationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _getContributors(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.ContributionStructOutput[]>;

  _replacePublication(
    publicationId: PromiseOrValue<BigNumberish>,
    pricingStrategy: PromiseOrValue<BigNumberish>,
    publicationUri: PromiseOrValue<string>,
    fixedSellPrice: PromiseOrValue<BigNumberish>,
    maxNumberOfLicences: PromiseOrValue<BigNumberish>,
    contributors: SharedStructures.ContributionStruct[],
    citations: SharedStructures.CitationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewLicenceToPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllPublications(
    _publisherAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLatestAuctionId(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwnerAddress(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.PublicationStructOutput>;

  getPublicationAuctions(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  publicationOwners(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publications(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      number,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      pricingStrategy: number;
      publicationUri: string;
      publicationStatus: number;
      ownerAddress: string;
      sellPrice: BigNumber;
      maxNumberOfLicences: number;
      licencesIssued: BigNumber;
      previousVersion: BigNumber;
      contributionsId: BigNumber;
      citationsId: BigNumber;
      lifetimeEarnings: BigNumber;
    }
  >;

  recordDonation(
    _publicationId: PromiseOrValue<BigNumberish>,
    _donationAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLicence(
    _publication_Id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GetPublicationPricingStrategy(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _citations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { publicationId: BigNumber; weighting: number }
    >;

    _contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        contributorAddress: string;
        weighting: number;
        balance: BigNumber;
        lifetimeAllocations: BigNumber;
      }
    >;

    _createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _ownerAddress: PromiseOrValue<string>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getContributors(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.ContributionStructOutput[]>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPublications(
      _publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLatestAuctionId(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.PublicationStructOutput>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publicationOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publications(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        number,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pricingStrategy: number;
        publicationUri: string;
        publicationStatus: number;
        ownerAddress: string;
        sellPrice: BigNumber;
        maxNumberOfLicences: number;
        licencesIssued: BigNumber;
        previousVersion: BigNumber;
        contributionsId: BigNumber;
        citationsId: BigNumber;
        lifetimeEarnings: BigNumber;
      }
    >;

    recordDonation(
      _publicationId: PromiseOrValue<BigNumberish>,
      _donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLicence(
      _publication_Id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewPublication(address,string,uint8)"(
      _publisherAddress?: PromiseOrValue<string> | null,
      _publicationUri?: null,
      _pricingStrategy?: null
    ): NewPublicationEventFilter;
    NewPublication(
      _publisherAddress?: PromiseOrValue<string> | null,
      _publicationUri?: null,
      _pricingStrategy?: null
    ): NewPublicationEventFilter;

    "PublicationOwnerUpdated(address,address,uint256,uint256)"(
      oldOwner?: null,
      newOwner?: null,
      oldPubId?: null,
      newPubId?: null
    ): PublicationOwnerUpdatedEventFilter;
    PublicationOwnerUpdated(
      oldOwner?: null,
      newOwner?: null,
      oldPubId?: null,
      newPubId?: null
    ): PublicationOwnerUpdatedEventFilter;

    "PublicationUpdated(address,uint256,uint256)"(
      _ownerId?: PromiseOrValue<string> | null,
      oldPubId?: null,
      newPubId?: null
    ): PublicationUpdatedEventFilter;
    PublicationUpdated(
      _ownerId?: PromiseOrValue<string> | null,
      oldPubId?: null,
      newPubId?: null
    ): PublicationUpdatedEventFilter;
  };

  estimateGas: {
    GetPublicationPricingStrategy(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _citations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _ownerAddress: PromiseOrValue<string>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _getContributors(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllPublications(
      _publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestAuctionId(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicationOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publications(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordDonation(
      _publicationId: PromiseOrValue<BigNumberish>,
      _donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLicence(
      _publication_Id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetPublicationPricingStrategy(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _citations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _ownerAddress: PromiseOrValue<string>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _getContributors(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllPublications(
      _publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestAuctionId(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerAddress(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publications(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordDonation(
      _publicationId: PromiseOrValue<BigNumberish>,
      _donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLicence(
      _publication_Id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
