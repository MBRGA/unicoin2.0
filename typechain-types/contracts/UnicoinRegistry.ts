/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructures {
  export type ContributionStruct = {
    contributorAddress: PromiseOrValue<string>;
    weighting: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    lifetimeAllocations: PromiseOrValue<BigNumberish>;
  };

  export type ContributionStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    contributorAddress: string;
    weighting: number;
    balance: BigNumber;
    lifetimeAllocations: BigNumber;
  };

  export type CitationStruct = {
    publicationId: PromiseOrValue<BigNumberish>;
    weighting: PromiseOrValue<BigNumberish>;
  };

  export type CitationStructOutput = [BigNumber, number] & {
    publicationId: BigNumber;
    weighting: number;
  };

  export type AuctionStruct = {
    publicationId: PromiseOrValue<BigNumberish>;
    auctionFloor: PromiseOrValue<BigNumberish>;
    startingTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    auctionBidIds: PromiseOrValue<BigNumberish>[];
    winningBidId: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    number
  ] & {
    publicationId: BigNumber;
    auctionFloor: BigNumber;
    startingTime: BigNumber;
    duration: BigNumber;
    auctionBidIds: BigNumber[];
    winningBidId: BigNumber;
    status: number;
  };

  export type BidStruct = {
    commitBid: PromiseOrValue<BytesLike>;
    revealedBid: PromiseOrValue<BigNumberish>;
    revealedSalt: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    publicationId: PromiseOrValue<BigNumberish>;
    auctionId: PromiseOrValue<BigNumberish>;
    bidderAddress: PromiseOrValue<string>;
  };

  export type BidStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    commitBid: string;
    revealedBid: BigNumber;
    revealedSalt: BigNumber;
    status: number;
    publicationId: BigNumber;
    auctionId: BigNumber;
    bidderAddress: string;
  };

  export type LicenceStruct = {
    ownerAddress: PromiseOrValue<string>;
    publicationId: PromiseOrValue<BigNumberish>;
    publicationLicenceNo: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type LicenceStructOutput = [string, BigNumber, BigNumber, number] & {
    ownerAddress: string;
    publicationId: BigNumber;
    publicationLicenceNo: BigNumber;
    status: number;
  };

  export type PublicationStruct = {
    pricingStrategy: PromiseOrValue<BigNumberish>;
    publicationUri: PromiseOrValue<string>;
    publicationStatus: PromiseOrValue<BigNumberish>;
    ownerAddress: PromiseOrValue<string>;
    sellPrice: PromiseOrValue<BigNumberish>;
    maxNumberOfLicences: PromiseOrValue<BigNumberish>;
    licencesIssued: PromiseOrValue<BigNumberish>;
    previousVersion: PromiseOrValue<BigNumberish>;
    auctionIds: PromiseOrValue<BigNumberish>[];
    contributionsId: PromiseOrValue<BigNumberish>;
    donations: PromiseOrValue<BigNumberish>[];
    citationsId: PromiseOrValue<BigNumberish>;
    lifetimeEarnings: PromiseOrValue<BigNumberish>;
  };

  export type PublicationStructOutput = [
    number,
    string,
    number,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    pricingStrategy: number;
    publicationUri: string;
    publicationStatus: number;
    ownerAddress: string;
    sellPrice: BigNumber;
    maxNumberOfLicences: number;
    licencesIssued: BigNumber;
    previousVersion: BigNumber;
    auctionIds: BigNumber[];
    contributionsId: BigNumber;
    donations: BigNumber[];
    citationsId: BigNumber;
    lifetimeEarnings: BigNumber;
  };

  export type TaxObjectStruct = {
    licenceId: PromiseOrValue<BigNumberish>;
    ratePerBlock: PromiseOrValue<BigNumberish>;
    lastPayment: PromiseOrValue<BigNumberish>;
    numberOfOutBids: PromiseOrValue<BigNumberish>;
    currentAssignedValue: PromiseOrValue<BigNumberish>;
    buyOuts: PromiseOrValue<BigNumberish>[];
    status: PromiseOrValue<BigNumberish>;
  };

  export type TaxObjectStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    number
  ] & {
    licenceId: BigNumber;
    ratePerBlock: BigNumber;
    lastPayment: BigNumber;
    numberOfOutBids: BigNumber;
    currentAssignedValue: BigNumber;
    buyOuts: BigNumber[];
    status: number;
  };
}

export interface UnicoinRegistryInterface extends utils.Interface {
  functions: {
    "buyLicenceFixedRate()": FunctionFragment;
    "canAddressPay(address,uint256)": FunctionFragment;
    "claimHarbergerTax(uint256)": FunctionFragment;
    "commitSealedBid(bytes32,uint256)": FunctionFragment;
    "createHarbergerBuyOut(uint256,uint256)": FunctionFragment;
    "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,(address,uint16,uint256,uint256)[],(uint256,uint16)[])": FunctionFragment;
    "donate(uint256,uint256)": FunctionFragment;
    "finalizeAuction(uint256)": FunctionFragment;
    "finalizeBuyoutOffer(uint256)": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getAuctionStatus(uint256)": FunctionFragment;
    "getBid(uint256)": FunctionFragment;
    "getBidderBids(address)": FunctionFragment;
    "getBids(address)": FunctionFragment;
    "getBlockTime()": FunctionFragment;
    "getLicence(uint256)": FunctionFragment;
    "getLicenceForAddress(address)": FunctionFragment;
    "getLicenceTaxObjectId(uint256)": FunctionFragment;
    "getMinBuyOutAmount(uint256)": FunctionFragment;
    "getMinBuyOutPrice(uint256)": FunctionFragment;
    "getMostRecentPublicationLicence(uint256)": FunctionFragment;
    "getOutstandingTax(uint256)": FunctionFragment;
    "getPublication(uint256)": FunctionFragment;
    "getPublicationAuctionBidLength(uint256)": FunctionFragment;
    "getPublicationAuctions(uint256)": FunctionFragment;
    "getPublicationBids(uint256)": FunctionFragment;
    "getPublicationLength()": FunctionFragment;
    "getPublicationLicences(uint256)": FunctionFragment;
    "getPublicationsAuthorAddress(address)": FunctionFragment;
    "getTaxObject(uint256)": FunctionFragment;
    "getTaxObjectLength()": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "isCallerRegistered()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "registerUser(string)": FunctionFragment;
    "revealSealedBid(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "updateAuctionStartTime(uint256,uint256)": FunctionFragment;
    "updateLicenceHarbergerValuation(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyLicenceFixedRate"
      | "canAddressPay"
      | "claimHarbergerTax"
      | "commitSealedBid"
      | "createHarbergerBuyOut"
      | "createPublication"
      | "donate"
      | "finalizeAuction"
      | "finalizeBuyoutOffer"
      | "getAuction"
      | "getAuctionStatus"
      | "getBid"
      | "getBidderBids"
      | "getBids"
      | "getBlockTime"
      | "getLicence"
      | "getLicenceForAddress"
      | "getLicenceTaxObjectId"
      | "getMinBuyOutAmount"
      | "getMinBuyOutPrice"
      | "getMostRecentPublicationLicence"
      | "getOutstandingTax"
      | "getPublication"
      | "getPublicationAuctionBidLength"
      | "getPublicationAuctions"
      | "getPublicationBids"
      | "getPublicationLength"
      | "getPublicationLicences"
      | "getPublicationsAuthorAddress"
      | "getTaxObject"
      | "getTaxObjectLength"
      | "initialize"
      | "isCallerRegistered"
      | "isTrustedForwarder"
      | "ownerOf"
      | "registerUser"
      | "revealSealedBid"
      | "setOwner"
      | "updateAuctionStartTime"
      | "updateLicenceHarbergerValuation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyLicenceFixedRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canAddressPay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHarbergerTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSealedBid",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createHarbergerBuyOut",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublication",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SharedStructures.ContributionStruct[],
      SharedStructures.CitationStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBuyoutOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderBids",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBids",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLicence",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenceForAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenceTaxObjectId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBuyOutAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBuyOutPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMostRecentPublicationLicence",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutstandingTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublication",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationAuctionBidLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationAuctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationBids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationLicences",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationsAuthorAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaxObject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaxObjectLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isCallerRegistered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealSealedBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuctionStartTime",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLicenceHarbergerValuation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyLicenceFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAddressPay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHarbergerTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSealedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHarbergerBuyOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBuyoutOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidderBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLicence", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLicenceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenceTaxObjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBuyOutAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBuyOutPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMostRecentPublicationLicence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutstandingTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationAuctionBidLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationLicences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationsAuthorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaxObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaxObjectLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCallerRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealSealedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAuctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLicenceHarbergerValuation",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UnicoinRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UnicoinRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyLicenceFixedRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canAddressPay(
      userAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimHarbergerTax(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitSealedBid(
      _bidHash: PromiseOrValue<BytesLike>,
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createHarbergerBuyOut(
      _licenceId: PromiseOrValue<BigNumberish>,
      _buyOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _auctionFloor: PromiseOrValue<BigNumberish>,
      _auctionStartTime: PromiseOrValue<BigNumberish>,
      _auctionDuration: PromiseOrValue<BigNumberish>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      _contributors: SharedStructures.ContributionStruct[],
      _citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      _publicationId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeBuyoutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.AuctionStructOutput]>;

    getAuctionStatus(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBid(
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.BidStructOutput]>;

    getBidderBids(
      bidderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBids(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLicence(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.LicenceStructOutput]>;

    getLicenceForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinBuyOutAmount(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMostRecentPublicationLicence(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.PublicationStructOutput]>;

    getPublicationAuctionBidLength(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPublicationBids(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPublicationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPublicationLicences(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPublicationsAuthorAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.TaxObjectStructOutput]>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _auctionManager: PromiseOrValue<string>,
      _licenceManager: PromiseOrValue<string>,
      _publicationManager: PromiseOrValue<string>,
      _userManager: PromiseOrValue<string>,
      _harbergerTaxManager: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isCallerRegistered(overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerUser(
      _profileUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealSealedBid(
      _bid: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      _publicationId: PromiseOrValue<BigNumberish>,
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAuctionStartTime(
      _publicationId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLicenceHarbergerValuation(
      _licenceId: PromiseOrValue<BigNumberish>,
      _newValuation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyLicenceFixedRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canAddressPay(
    userAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimHarbergerTax(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitSealedBid(
    _bidHash: PromiseOrValue<BytesLike>,
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createHarbergerBuyOut(
    _licenceId: PromiseOrValue<BigNumberish>,
    _buyOutAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPublication(
    _pricingStrategy: PromiseOrValue<BigNumberish>,
    _publicationUri: PromiseOrValue<string>,
    _auctionFloor: PromiseOrValue<BigNumberish>,
    _auctionStartTime: PromiseOrValue<BigNumberish>,
    _auctionDuration: PromiseOrValue<BigNumberish>,
    _fixedSellPrice: PromiseOrValue<BigNumberish>,
    _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
    _contributors: SharedStructures.ContributionStruct[],
    _citations: SharedStructures.CitationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    _publicationId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeBuyoutOffer(
    _buyOutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.AuctionStructOutput>;

  getAuctionStatus(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBid(
    _bidId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.BidStructOutput>;

  getBidderBids(
    bidderAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBids(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  getLicence(
    _licenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.LicenceStructOutput>;

  getLicenceForAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLicenceTaxObjectId(
    _licenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinBuyOutAmount(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinBuyOutPrice(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMostRecentPublicationLicence(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutstandingTax(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.PublicationStructOutput>;

  getPublicationAuctionBidLength(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPublicationAuctions(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPublicationBids(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPublicationLicences(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPublicationsAuthorAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTaxObject(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.TaxObjectStructOutput>;

  getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _auctionManager: PromiseOrValue<string>,
    _licenceManager: PromiseOrValue<string>,
    _publicationManager: PromiseOrValue<string>,
    _userManager: PromiseOrValue<string>,
    _harbergerTaxManager: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isCallerRegistered(overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerUser(
    _profileUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealSealedBid(
    _bid: PromiseOrValue<BigNumberish>,
    _salt: PromiseOrValue<BigNumberish>,
    _publicationId: PromiseOrValue<BigNumberish>,
    _bidId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAuctionStartTime(
    _publicationId: PromiseOrValue<BigNumberish>,
    _newStartTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLicenceHarbergerValuation(
    _licenceId: PromiseOrValue<BigNumberish>,
    _newValuation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyLicenceFixedRate(overrides?: CallOverrides): Promise<void>;

    canAddressPay(
      userAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimHarbergerTax(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitSealedBid(
      _bidHash: PromiseOrValue<BytesLike>,
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createHarbergerBuyOut(
      _licenceId: PromiseOrValue<BigNumberish>,
      _buyOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _auctionFloor: PromiseOrValue<BigNumberish>,
      _auctionStartTime: PromiseOrValue<BigNumberish>,
      _auctionDuration: PromiseOrValue<BigNumberish>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      _contributors: SharedStructures.ContributionStruct[],
      _citations: SharedStructures.CitationStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    donate(
      _publicationId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeBuyoutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.AuctionStructOutput>;

    getAuctionStatus(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBid(
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.BidStructOutput>;

    getBidderBids(
      bidderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBids(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getLicence(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.LicenceStructOutput>;

    getLicenceForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBuyOutAmount(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMostRecentPublicationLicence(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.PublicationStructOutput>;

    getPublicationAuctionBidLength(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPublicationBids(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicationLicences(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPublicationsAuthorAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.TaxObjectStructOutput>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _auctionManager: PromiseOrValue<string>,
      _licenceManager: PromiseOrValue<string>,
      _publicationManager: PromiseOrValue<string>,
      _userManager: PromiseOrValue<string>,
      _harbergerTaxManager: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isCallerRegistered(overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerUser(
      _profileUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealSealedBid(
      _bid: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      _publicationId: PromiseOrValue<BigNumberish>,
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAuctionStartTime(
      _publicationId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLicenceHarbergerValuation(
      _licenceId: PromiseOrValue<BigNumberish>,
      _newValuation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    buyLicenceFixedRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canAddressPay(
      userAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimHarbergerTax(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitSealedBid(
      _bidHash: PromiseOrValue<BytesLike>,
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createHarbergerBuyOut(
      _licenceId: PromiseOrValue<BigNumberish>,
      _buyOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _auctionFloor: PromiseOrValue<BigNumberish>,
      _auctionStartTime: PromiseOrValue<BigNumberish>,
      _auctionDuration: PromiseOrValue<BigNumberish>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      _contributors: SharedStructures.ContributionStruct[],
      _citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      _publicationId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeBuyoutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBid(
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidderBids(
      bidderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBids(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getLicence(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenceForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBuyOutAmount(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMostRecentPublicationLicence(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationAuctionBidLength(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationBids(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicationLicences(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationsAuthorAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _auctionManager: PromiseOrValue<string>,
      _licenceManager: PromiseOrValue<string>,
      _publicationManager: PromiseOrValue<string>,
      _userManager: PromiseOrValue<string>,
      _harbergerTaxManager: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isCallerRegistered(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUser(
      _profileUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealSealedBid(
      _bid: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      _publicationId: PromiseOrValue<BigNumberish>,
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAuctionStartTime(
      _publicationId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLicenceHarbergerValuation(
      _licenceId: PromiseOrValue<BigNumberish>,
      _newValuation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyLicenceFixedRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canAddressPay(
      userAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimHarbergerTax(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitSealedBid(
      _bidHash: PromiseOrValue<BytesLike>,
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createHarbergerBuyOut(
      _licenceId: PromiseOrValue<BigNumberish>,
      _buyOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPublication(
      _pricingStrategy: PromiseOrValue<BigNumberish>,
      _publicationUri: PromiseOrValue<string>,
      _auctionFloor: PromiseOrValue<BigNumberish>,
      _auctionStartTime: PromiseOrValue<BigNumberish>,
      _auctionDuration: PromiseOrValue<BigNumberish>,
      _fixedSellPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      _contributors: SharedStructures.ContributionStruct[],
      _citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      _publicationId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeBuyoutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBid(
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidderBids(
      bidderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBids(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLicence(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenceForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBuyOutAmount(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMostRecentPublicationLicence(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationAuctionBidLength(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationAuctions(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationBids(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationLicences(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationsAuthorAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaxObjectLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _auctionManager: PromiseOrValue<string>,
      _licenceManager: PromiseOrValue<string>,
      _publicationManager: PromiseOrValue<string>,
      _userManager: PromiseOrValue<string>,
      _harbergerTaxManager: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isCallerRegistered(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerUser(
      _profileUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealSealedBid(
      _bid: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      _publicationId: PromiseOrValue<BigNumberish>,
      _bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAuctionStartTime(
      _publicationId: PromiseOrValue<BigNumberish>,
      _newStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLicenceHarbergerValuation(
      _licenceId: PromiseOrValue<BigNumberish>,
      _newValuation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
