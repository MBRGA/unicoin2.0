/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructures {
  export type TaxObjectStruct = {
    licenceId: PromiseOrValue<BigNumberish>;
    ratePerBlock: PromiseOrValue<BigNumberish>;
    lastPayment: PromiseOrValue<BigNumberish>;
    numberOfOutBids: PromiseOrValue<BigNumberish>;
    currentAssignedValue: PromiseOrValue<BigNumberish>;
    buyOuts: PromiseOrValue<BigNumberish>[];
    status: PromiseOrValue<BigNumberish>;
  };

  export type TaxObjectStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    number
  ] & {
    licenceId: BigNumber;
    ratePerBlock: BigNumber;
    lastPayment: BigNumber;
    numberOfOutBids: BigNumber;
    currentAssignedValue: BigNumber;
    buyOuts: BigNumber[];
    status: number;
  };
}

export interface HarbergerTaxManagerInterface extends utils.Interface {
  functions: {
    "_updateTaxObjectLastPayment(uint256)": FunctionFragment;
    "_updateTaxObjectValuation(uint256,uint256)": FunctionFragment;
    "calculateMinBuyOutPrice(uint256)": FunctionFragment;
    "calculateOutstandingTax(uint256)": FunctionFragment;
    "capFunction(uint256,uint256,uint256)": FunctionFragment;
    "createTaxObject(uint256,uint256)": FunctionFragment;
    "finalizeBuyOutOffer(uint256)": FunctionFragment;
    "futureValue(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBuyOutLicenceId(uint256)": FunctionFragment;
    "getBuyOutOwnerAddress(uint256)": FunctionFragment;
    "getLicenceTaxObjectId(uint256)": FunctionFragment;
    "getTaxObject(uint256)": FunctionFragment;
    "getTaxObjectLength()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "licenceTaxObjects(uint256,uint256)": FunctionFragment;
    "optimalExp(uint256)": FunctionFragment;
    "revokeTaxObject(uint256)": FunctionFragment;
    "submitBuyOut(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_updateTaxObjectLastPayment"
      | "_updateTaxObjectValuation"
      | "calculateMinBuyOutPrice"
      | "calculateOutstandingTax"
      | "capFunction"
      | "createTaxObject"
      | "finalizeBuyOutOffer"
      | "futureValue"
      | "getBuyOutLicenceId"
      | "getBuyOutOwnerAddress"
      | "getLicenceTaxObjectId"
      | "getTaxObject"
      | "getTaxObjectLength"
      | "isTrustedForwarder"
      | "licenceTaxObjects"
      | "optimalExp"
      | "revokeTaxObject"
      | "submitBuyOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_updateTaxObjectLastPayment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_updateTaxObjectValuation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMinBuyOutPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOutstandingTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "capFunction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTaxObject",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBuyOutOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "futureValue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyOutLicenceId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyOutOwnerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicenceTaxObjectId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaxObject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaxObjectLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licenceTaxObjects",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "optimalExp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTaxObject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBuyOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_updateTaxObjectLastPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateTaxObjectValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMinBuyOutPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOutstandingTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTaxObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBuyOutOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyOutLicenceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyOutOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicenceTaxObjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaxObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaxObjectLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licenceTaxObjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optimalExp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeTaxObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBuyOut",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface HarbergerTaxManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HarbergerTaxManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _updateTaxObjectLastPayment(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _updateTaxObjectValuation(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _assignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    capFunction(
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createTaxObject(
      _licenceId: PromiseOrValue<BigNumberish>,
      _currentAssignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeBuyOutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    futureValue(
      N: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyOutLicenceId(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyOutOwnerAddress(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.TaxObjectStructOutput]>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    licenceTaxObjects(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimalExp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    revokeTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitBuyOut(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _offer: PromiseOrValue<BigNumberish>,
      _buyOutOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _updateTaxObjectLastPayment(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _updateTaxObjectValuation(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    _assignedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateMinBuyOutPrice(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateOutstandingTax(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  capFunction(
    r: PromiseOrValue<BigNumberish>,
    t1: PromiseOrValue<BigNumberish>,
    t2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createTaxObject(
    _licenceId: PromiseOrValue<BigNumberish>,
    _currentAssignedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeBuyOutOffer(
    _buyOutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  futureValue(
    N: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BigNumberish>,
    t1: PromiseOrValue<BigNumberish>,
    t2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyOutLicenceId(
    _buyOutId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyOutOwnerAddress(
    _buyOutId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLicenceTaxObjectId(
    _licenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTaxObject(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.TaxObjectStructOutput>;

  getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  licenceTaxObjects(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optimalExp(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revokeTaxObject(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitBuyOut(
    _taxObjectId: PromiseOrValue<BigNumberish>,
    _offer: PromiseOrValue<BigNumberish>,
    _buyOutOwnerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _updateTaxObjectLastPayment(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _updateTaxObjectValuation(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _assignedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capFunction(
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTaxObject(
      _licenceId: PromiseOrValue<BigNumberish>,
      _currentAssignedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeBuyOutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    futureValue(
      N: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyOutLicenceId(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyOutOwnerAddress(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.TaxObjectStructOutput>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    licenceTaxObjects(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalExp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitBuyOut(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _offer: PromiseOrValue<BigNumberish>,
      _buyOutOwnerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    _updateTaxObjectLastPayment(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _updateTaxObjectValuation(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _assignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capFunction(
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTaxObject(
      _licenceId: PromiseOrValue<BigNumberish>,
      _currentAssignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeBuyOutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    futureValue(
      N: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyOutLicenceId(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyOutOwnerAddress(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaxObjectLength(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenceTaxObjects(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalExp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitBuyOut(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _offer: PromiseOrValue<BigNumberish>,
      _buyOutOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _updateTaxObjectLastPayment(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _updateTaxObjectValuation(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _assignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateMinBuyOutPrice(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOutstandingTax(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    capFunction(
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTaxObject(
      _licenceId: PromiseOrValue<BigNumberish>,
      _currentAssignedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeBuyOutOffer(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    futureValue(
      N: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyOutLicenceId(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyOutOwnerAddress(
      _buyOutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLicenceTaxObjectId(
      _licenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaxObjectLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenceTaxObjects(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimalExp(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeTaxObject(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitBuyOut(
      _taxObjectId: PromiseOrValue<BigNumberish>,
      _offer: PromiseOrValue<BigNumberish>,
      _buyOutOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
