/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "unicoinRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "canAddressPay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_ownerAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "contributorAddress",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "weighting",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lifetimeAllocations",
            type: "uint256",
          },
        ],
        internalType: "struct SharedStructures.Contribution[]",
        name: "contributors",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_paymentAmount",
        type: "uint256",
      },
    ],
    name: "settleBulkPayment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "settlePayment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0346100e357601f6108f038819003918201601f19168301916001600160401b038311848410176100e85780849260409485528339810103126100e357610052602061004b836100fe565b92016100fe565b60805261005d610175565b90816100cf575b60a052610094575b60405161073a90816101b682396080518181816104080152610692015260a0518161046c0152f35b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a161006c565b61010061ff00196000541617600055610064565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100e357565b1561011957565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60005460ff8160081c166000146101975750610192303b15610112565b600090565b806101a8600160ff81941610610112565b60ff19161760005560019056fe6080604081815260048036101561001557600080fd5b600092833560e01c908163454bd24e1461042f57508063572b6c05146103dc5780637a3e00cd146102ae578063c4d66de81461021b5763eabfa0991461005a57600080fd5b346102135760803660031901126102135761007361055c565b9061007c610577565b506044359367ffffffffffffffff918286116102175736602387011215610217578581013592831161021757602493848701968536918660071b0101116102135760643580151597600019828104969093929086805b8282106100e35760208c5160018152f35b899392919060209061ffff8f81610105856100ff888a8e6106cf565b016106f5565b169d8e11166102015761011d836100ff86888c6106cf565b16908119811161020157019a6001600160a01b039081606554169161014385878b6106cf565b3590811681036101fd578f516323b872dd60e01b81526001600160a01b03808c16828f019081529216602083015260649288029290920460408201529091839183919082908f90829060600103925af180156101f3576101c5575b50508681146101b357600101909192986100d2565b634e487b7160e01b8952601188528a89fd5b816101e492903d106101ec575b6101dc818361063f565b810190610677565b50388061019e565b503d6101d2565b8e513d8d823e3d90fd5b8c80fd5b634e487b7160e01b8c5260118b528d8cfd5b8280fd5b5080fd5b5050346102175760203660031901126102175761023661055c565b6001600160a01b036102466105ff565b918261029c575b166001600160a01b031960655416176065556102665751f35b61ff001982541682557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020825160018152a151f35b845461ff00191661010017855561024d565b509190346102175780600319360112610217576102c961055c565b602435906001600160a01b038060655416908451926370a0823160e01b84521680878401526020968784602481865afa9384156103d25790889291889561039a575b5060449087519485938492636eb1769f60e11b84528301523060248301525afa94851561038f57809561035a575b5050811115928361034f575b5050519015158152f35b101591503880610345565b909194508582813d8311610388575b610373818361063f565b81010312610385575051928138610339565b80fd5b503d610369565b8451903d90823e3d90fd5b838193949296503d83116103cb575b6103b3818361063f565b810103126103c7575192879190604461030b565b8680fd5b503d6103a9565b86513d89823e3d90fd5b505034610217576020366003190112610217576020906103fa61055c565b9051906001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169116148152f35b84848492346102135760603660031901126102135761044c61055c565b90610455610577565b9061045e61068f565b906001600160a01b039182807f00000000000000000000000000000000000000000000000000000000000000001691160361051b575060655484516323b872dd60e01b81526001600160a01b039485169781019788529290931660208088019190915260443560408801529195919286928390036060019183918791165af1928315610510576020936104f3575b5051908152f35b61050990843d81116101ec576101dc818361063f565b50836104ec565b5051903d90823e3d90fd5b62461bcd60e51b8152602087820152601e60248201527f43616e206f6e6c792062652063616c6c656420627920726567697374727900006044820152606490fd5b600435906001600160a01b038216820361057257565b600080fd5b602435906001600160a01b038216820361057257565b1561059457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b60005460ff8160081c16600014610621575061061c303b1561058d565b600090565b80610632600160ff8194161061058d565b60ff191617600055600190565b90601f8019910116810190811067ffffffffffffffff82111761066157604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610572575180151581036105725790565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036106cb5736601319013560601c90565b3390565b91908110156106df5760071b0190565b634e487b7160e01b600052603260045260246000fd5b3561ffff81168103610572579056fea26469706673582212202d80679a3bffab8fe303d4fc318ce29e199a06bba357924aab3183282f099e6764736f6c634300080f0033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    unicoinRegistry: PromiseOrValue<string>,
    trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vault> {
    return super.deploy(
      unicoinRegistry,
      trustedForwarder,
      overrides || {}
    ) as Promise<Vault>;
  }
  override getDeployTransaction(
    unicoinRegistry: PromiseOrValue<string>,
    trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      unicoinRegistry,
      trustedForwarder,
      overrides || {}
    );
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
