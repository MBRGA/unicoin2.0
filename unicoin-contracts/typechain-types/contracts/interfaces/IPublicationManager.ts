/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SharedStructures {
  export type ContributionStruct = {
    contributorAddress: PromiseOrValue<string>;
    weighting: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    lifetimeAllocations: PromiseOrValue<BigNumberish>;
  };

  export type ContributionStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    contributorAddress: string;
    weighting: number;
    balance: BigNumber;
    lifetimeAllocations: BigNumber;
  };

  export type CitationStruct = {
    publicationId: PromiseOrValue<BigNumberish>;
    weighting: PromiseOrValue<BigNumberish>;
  };

  export type CitationStructOutput = [BigNumber, number] & {
    publicationId: BigNumber;
    weighting: number;
  };

  export type PublicationStruct = {
    pricingStrategy: PromiseOrValue<BigNumberish>;
    publicationUri: PromiseOrValue<string>;
    publicationStatus: PromiseOrValue<BigNumberish>;
    ownerAddress: PromiseOrValue<string>;
    sellPrice: PromiseOrValue<BigNumberish>;
    maxNumberOfLicences: PromiseOrValue<BigNumberish>;
    licencesIssued: PromiseOrValue<BigNumberish>;
    previousVersion: PromiseOrValue<BigNumberish>;
    auctionIds: PromiseOrValue<BigNumberish>[];
    contributionsId: PromiseOrValue<BigNumberish>;
    donations: PromiseOrValue<BigNumberish>[];
    citationsId: PromiseOrValue<BigNumberish>;
    lifetimeEarnings: PromiseOrValue<BigNumberish>;
  };

  export type PublicationStructOutput = [
    number,
    string,
    number,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    pricingStrategy: number;
    publicationUri: string;
    publicationStatus: number;
    ownerAddress: string;
    sellPrice: BigNumber;
    maxNumberOfLicences: number;
    licencesIssued: BigNumber;
    previousVersion: BigNumber;
    auctionIds: BigNumber[];
    contributionsId: BigNumber;
    donations: BigNumber[];
    citationsId: BigNumber;
    lifetimeEarnings: BigNumber;
  };
}

export interface IPublicationManagerInterface extends utils.Interface {
  functions: {
    "_addAuctionToPublication(uint256,uint256)": FunctionFragment;
    "_addNewLicenceToPublication(uint256)": FunctionFragment;
    "_changeOwner(uint256,address)": FunctionFragment;
    "_createPublication(uint8,string,address,uint256,uint8,(address,uint16,uint256,uint256)[],(uint256,uint16)[])": FunctionFragment;
    "_recordDonation(uint256,uint256)": FunctionFragment;
    "_replacePublication(uint256,uint8,string,uint256,uint8,(address,uint16,uint256,uint256)[],(uint256,uint16)[])": FunctionFragment;
    "_revokeLicence(uint256)": FunctionFragment;
    "getAllPublications(address)": FunctionFragment;
    "getContributors(uint256)": FunctionFragment;
    "getLatestAuctionId(uint256)": FunctionFragment;
    "getOwnerAddress(uint256)": FunctionFragment;
    "getPublication(uint256)": FunctionFragment;
    "getPublicationAuctions(uint256)": FunctionFragment;
    "getPublicationLength()": FunctionFragment;
    "getPublicationPricingStrategy(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addAuctionToPublication"
      | "_addNewLicenceToPublication"
      | "_changeOwner"
      | "_createPublication"
      | "_recordDonation"
      | "_replacePublication"
      | "_revokeLicence"
      | "getAllPublications"
      | "getContributors"
      | "getLatestAuctionId"
      | "getOwnerAddress"
      | "getPublication"
      | "getPublicationAuctions"
      | "getPublicationLength"
      | "getPublicationPricingStrategy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addAuctionToPublication",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_addNewLicenceToPublication",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_changeOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_createPublication",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SharedStructures.ContributionStruct[],
      SharedStructures.CitationStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_recordDonation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_replacePublication",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      SharedStructures.ContributionStruct[],
      SharedStructures.CitationStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_revokeLicence",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPublications",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAuctionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublication",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationAuctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationPricingStrategy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addAuctionToPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_addNewLicenceToPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_recordDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_replacePublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_revokeLicence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPublications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationPricingStrategy",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPublicationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPublicationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _createPublication(
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _recordDonation(
      publicationId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _revokeLicence(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllPublications(
      publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getContributors(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.ContributionStructOutput[]]>;

    getLatestAuctionId(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwnerAddress(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublication(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SharedStructures.PublicationStructOutput]>;

    getPublicationAuctions(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPublicationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPublicationPricingStrategy(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  _addAuctionToPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _addNewLicenceToPublication(
    _publicationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _changeOwner(
    publicationId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _createPublication(
    pricingStrategy: PromiseOrValue<BigNumberish>,
    publicationUri: PromiseOrValue<string>,
    ownerAddress: PromiseOrValue<string>,
    fixedSellPrice: PromiseOrValue<BigNumberish>,
    maxNumberOfLicences: PromiseOrValue<BigNumberish>,
    contributors: SharedStructures.ContributionStruct[],
    citations: SharedStructures.CitationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _recordDonation(
    publicationId: PromiseOrValue<BigNumberish>,
    donationAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _replacePublication(
    publicationId: PromiseOrValue<BigNumberish>,
    pricingStrategy: PromiseOrValue<BigNumberish>,
    publicationUri: PromiseOrValue<string>,
    fixedSellPrice: PromiseOrValue<BigNumberish>,
    maxNumberOfLicences: PromiseOrValue<BigNumberish>,
    contributors: SharedStructures.ContributionStruct[],
    citations: SharedStructures.CitationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _revokeLicence(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllPublications(
    publisherAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getContributors(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.ContributionStructOutput[]>;

  getLatestAuctionId(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwnerAddress(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublication(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SharedStructures.PublicationStructOutput>;

  getPublicationAuctions(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPublicationPricingStrategy(
    publicationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _createPublication(
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _recordDonation(
      publicationId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _revokeLicence(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPublications(
      publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getContributors(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.ContributionStructOutput[]>;

    getLatestAuctionId(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublication(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SharedStructures.PublicationStructOutput>;

    getPublicationAuctions(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicationPricingStrategy(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _createPublication(
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _recordDonation(
      publicationId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _revokeLicence(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllPublications(
      publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributors(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestAuctionId(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublication(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationAuctions(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicationLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicationPricingStrategy(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addAuctionToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _addNewLicenceToPublication(
      _publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _changeOwner(
      publicationId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _createPublication(
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _recordDonation(
      publicationId: PromiseOrValue<BigNumberish>,
      donationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _replacePublication(
      publicationId: PromiseOrValue<BigNumberish>,
      pricingStrategy: PromiseOrValue<BigNumberish>,
      publicationUri: PromiseOrValue<string>,
      fixedSellPrice: PromiseOrValue<BigNumberish>,
      maxNumberOfLicences: PromiseOrValue<BigNumberish>,
      contributors: SharedStructures.ContributionStruct[],
      citations: SharedStructures.CitationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _revokeLicence(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllPublications(
      publisherAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributors(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestAuctionId(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerAddress(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublication(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationAuctions(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicationPricingStrategy(
      publicationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
