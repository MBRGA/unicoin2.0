/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "unicoinRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "contributorAddress",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "weighting",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lifetimeAllocations",
            type: "uint256",
          },
        ],
        internalType: "struct SharedStructures.Contribution[]",
        name: "contributors",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "paymentAmount",
        type: "uint256",
      },
    ],
    name: "_settleBulkPayment",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_settlePayment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canAddressPay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c03461018b57601f610a2638819003918201601f19168301916001600160401b0383118484101761019057808492604094855283398101031261018b57610052602061004b836101a6565b92016101a6565b6080526000549060ff8260081c16159182809361017e575b8015610167575b1561010b5760ff198116600117600055826100f9575b5060a0526100be575b60405161086b90816101bb82396080518181816105c0015261079a015260a05181818160cd01526106250152f35b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1610090565b61ffff19166101011760005538610087565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156100715750600160ff821614610071565b50600160ff82161061006a565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361018b5756fe6080604052600436101561001257600080fd5b60003560e01c806355179102146105e7578063572b6c05146105965780637a3e00cd14610488578063c4d66de8146103435763e6a3b4971461005357600080fd5b346103295760803660031901126103295761006c6106cf565b6100746106e5565b9060443567ffffffffffffffff8082116103295736602383011215610329578160040135116103295760243681836004013560071b84010111610329576064918235916100f56100c2610797565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016911614610733565b60009160005b816004013581106101d15750508184106101bd5761016960208787876101238888830361080c565b6065546040516323b872dd60e01b81526001600160a01b039485166004820152948416602486015291900460448401529193849290911690829060009082906064820190565b03925af180156101b157610183575b602060405160018152f35b6101a39060203d81116101aa575b61019b81836106fb565b81019061077f565b5080610178565b503d610191565b6040513d6000823e3d90fd5b634e487b7160e01b60009081526011600452fd5b61ffff93866101fd866101f660206101f08789600401358b8b016107d7565b016107fd565b168861080c565b049461021560206101f08587600401358989016107d7565b16908119811161032e5701936001600160a01b03606554169061023f8385600401358787016107d7565b35906001600160a01b0382168203610329576040516323b872dd60e01b81526001600160a01b038b81166004830152929092166024830152604482015290602090829060649082906000905af19081156101b15760009161030a575b50156102c75760001981146102b2576001016100fb565b82634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b8152602060048201819052818501527f436f6d706f6e656e74206f662062756c6b207061796d656e74206661696c656460448201528690fd5b610323915060203d6020116101aa5761019b81836106fb565b3861029b565b600080fd5b84634e487b7160e01b60005260116004526000fd5b346103295760203660031901126103295761035c6106cf565b60005460ff8160081c16159182809361047b575b8015610464575b156103f95760ff1982166001176000556001600160a01b0391836103e7575b50166001600160a01b031960655416176065556103af57005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005583610396565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b50303b1580156103775750600160ff831614610377565b50600160ff831610610370565b34610329576040366003190112610329576104a16106cf565b6024356001600160a01b0390816065541691604051936370a0823160e01b8552168060048501526020938481602481875afa9182156101b1578591600093610565575b50604460405180968193636eb1769f60e11b835260048301523060248301525afa9283156101b157600093610536575b50811115918261052b575b50506040519015158152f35b10159050828061051f565b9092508381813d831161055e575b61054e81836106fb565b8101031261032957519181610514565b503d610544565b8281939294503d831161058f575b61057d81836106fb565b810103126103295784905191866104e4565b503d610573565b346103295760203660031901126103295760206105b16106cf565b604051906001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169116148152f35b346103295760603660031901126103295761069260206106056106cf565b61060d6106e5565b610615610797565b61064d6001600160a01b039182807f000000000000000000000000000000000000000000000000000000000000000016911614610733565b606554169060006040518096819582946323b872dd60e01b845260443591600485016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af180156101b1576020916000916106b2575b506040519015158152f35b6106c99150823d81116101aa5761019b81836106fb565b826106a7565b600435906001600160a01b038216820361032957565b602435906001600160a01b038216820361032957565b90601f8019910116810190811067ffffffffffffffff82111761071d57604052565b634e487b7160e01b600052604160045260246000fd5b1561073a57565b60405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792062652063616c6c656420627920726567697374727900006044820152606490fd5b90816020910312610329575180151581036103295790565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036107d35736601319013560601c90565b3390565b91908110156107e75760071b0190565b634e487b7160e01b600052603260045260246000fd5b3561ffff811681036103295790565b806000190482118115151661081f570290565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220353fa5c17e9a384857df389a229ed6b457a729af7e9dafb35f7e1a852fd656ff64736f6c634300080f0033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    unicoinRegistry: PromiseOrValue<string>,
    trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vault> {
    return super.deploy(
      unicoinRegistry,
      trustedForwarder,
      overrides || {}
    ) as Promise<Vault>;
  }
  override getDeployTransaction(
    unicoinRegistry: PromiseOrValue<string>,
    trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      unicoinRegistry,
      trustedForwarder,
      overrides || {}
    );
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
