{
  "version": "3.2",
  "log": [
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10425_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10448_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10425_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10448_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10404": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10408": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10425_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10404",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10448_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10408",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10386_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10369_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10369_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10386_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10354": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10357": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10369_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10354",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10386_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10357",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10399_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10399_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10389": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10399_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10389",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10350_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10314_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10319_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10319_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10314_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10319_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10314_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10350_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10298": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10305": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10319_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10314_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10350_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10298",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10305",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "6d3c785daef402c0ac36aa1d7fad42b5e6855300cf15ee97fe7d9430530bab34",
          "withoutMetadata": "5c47e1f82e6315d94d9f5cb465eb9a60fab36d90d1e3b033c31b11534dd54b6c",
          "linkedWithoutMetadata": "5c47e1f82e6315d94d9f5cb465eb9a60fab36d90d1e3b033c31b11534dd54b6c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "getUserId(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getPublicationLatestAuction(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)",
          "cancelBid(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9863",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10060",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10211",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10244",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9990",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10283",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9863": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9990": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10060": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10211": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10244": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10283": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "dea006425fd3488b6e5ec73b4111bc9cb35b6c1b63c970c460f5ae85431dba99",
          "withoutMetadata": "017b7a2ea4d7a3f56ea8345b4901359d9988f77794f8e9d241969cc5edf23bae",
          "linkedWithoutMetadata": "017b7a2ea4d7a3f56ea8345b4901359d9988f77794f8e9d241969cc5edf23bae"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10292_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10292_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10292_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10415_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10438_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10415_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10438_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10394": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10398": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10415_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10394",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10438_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10398",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10376_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10359_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10359_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10376_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10344": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10347": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10359_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10344",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10376_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10347",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10389_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10389_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10379": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10389_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10379",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10340_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10304_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10309_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10309_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10304_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10309_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10304_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10340_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10288": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10295": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10309_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10304_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10340_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10288",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10295",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "f3b545a9f0cfcdb3232656f4f077811ac457b7770802275987015141ce0be216",
          "withoutMetadata": "827969035617bc675b3dfe8c7c1bc1fb98b0dc4d8d9841a870aa359ad0f2795e",
          "linkedWithoutMetadata": "827969035617bc675b3dfe8c7c1bc1fb98b0dc4d8d9841a870aa359ad0f2795e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "getUserId(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getPublicationLatestAuction(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9853",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10050",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10201",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10234",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9980",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10273",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9853": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9980": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10050": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10201": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10234": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10273": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "dea006425fd3488b6e5ec73b4111bc9cb35b6c1b63c970c460f5ae85431dba99",
          "withoutMetadata": "017b7a2ea4d7a3f56ea8345b4901359d9988f77794f8e9d241969cc5edf23bae",
          "linkedWithoutMetadata": "017b7a2ea4d7a3f56ea8345b4901359d9988f77794f8e9d241969cc5edf23bae"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10282_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10282_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10282_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10410_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10433_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10410_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10433_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10389": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10393": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10410_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10389",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10433_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10393",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10371_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10354_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10354_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10371_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10339": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10342": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10354_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10339",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10371_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10342",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10384_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10384_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10374": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10384_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10374",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10335_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10299_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10304_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10304_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10299_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10304_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10299_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10335_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10283": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10290": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10304_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10299_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10335_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10283",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10290",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "f3b545a9f0cfcdb3232656f4f077811ac457b7770802275987015141ce0be216",
          "withoutMetadata": "827969035617bc675b3dfe8c7c1bc1fb98b0dc4d8d9841a870aa359ad0f2795e",
          "linkedWithoutMetadata": "827969035617bc675b3dfe8c7c1bc1fb98b0dc4d8d9841a870aa359ad0f2795e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "getUserId(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getPublicationLatestAuction(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9848",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10045",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10196",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10229",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9975",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10268",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9848": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9975": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10045": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10196": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10229": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10268": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "ddf17041f40c0ba658fb2b9efb294b2d19fbbbb80747cf0e4761ab5364d0c8e2",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10277_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10277_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10277_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10397_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10420_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10397_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10420_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10376": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10380": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10397_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10376",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10420_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10380",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10358_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10341_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10341_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10358_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10326": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10329": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10341_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10326",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10358_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10329",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10371_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10371_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10361": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10371_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10361",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10322_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10286_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10291_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10291_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10286_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10291_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10286_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10322_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10270": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10277": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10291_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10286_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10322_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10270",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10277",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "ad75a666d649290432f92edf08795c60f4a19c13dcd3e530f1fdf9bc109cafdf",
          "withoutMetadata": "8d49c32babc4068fb28b2cb3442f0efb93fd27744a8565aeaea270d03d14e92b",
          "linkedWithoutMetadata": "8d49c32babc4068fb28b2cb3442f0efb93fd27744a8565aeaea270d03d14e92b"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getPublicationLatestAuction(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9835",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10032",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10183",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10216",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9962",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10255",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9835": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9962": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10032": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10183": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10216": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10255": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10264_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10264_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10264_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10397_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10420_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10397_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10420_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10376": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10380": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10397_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10376",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10420_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10380",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10358_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10341_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10341_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10358_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10326": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10329": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10341_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10326",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10358_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10329",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10371_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10371_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10361": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10371_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10361",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10322_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10286_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10291_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10291_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10286_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10291_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10286_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10322_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10270": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10277": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10291_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10286_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10322_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10270",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10277",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "14a8843d0870a2a91d0432d4f0bee0a4e2a3f62484a991994105ae4e644c261a",
          "withoutMetadata": "8d49c32babc4068fb28b2cb3442f0efb93fd27744a8565aeaea270d03d14e92b",
          "linkedWithoutMetadata": "8d49c32babc4068fb28b2cb3442f0efb93fd27744a8565aeaea270d03d14e92b"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getPublicationLatestAuction(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9835",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10032",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10183",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10216",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9962",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10255",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9835": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9962": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10032": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10183": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10216": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10255": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10264_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10264_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10264_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10375_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10398_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10375_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10398_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10354": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10358": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10375_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10354",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10398_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10358",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10336_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10319_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10319_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10336_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10304": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10307": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10319_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10304",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10336_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10307",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10349_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10349_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10339": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10349_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10339",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10300_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10264_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10269_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10269_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10264_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10269_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10264_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10300_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10248": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10255": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10269_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10264_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10300_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10248",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10255",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "217dab7dc0d99574f71b16225fd988b4d3b3cda8afe62558ba8bafa7392b4ac7",
          "withoutMetadata": "61526226cad64432e70f576f098e11fa6f3fdd7b765494e7eee07619d375abac",
          "linkedWithoutMetadata": "61526226cad64432e70f576f098e11fa6f3fdd7b765494e7eee07619d375abac"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9813",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)10010",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10161",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10194",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9940",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10233",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9813": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9940": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)10010": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10161": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10194": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10233": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10242_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10242_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10242_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "ff60268a2e6ba8957690cb6eab9d6c05c00c7533cfeaae60b4085076483b218d",
          "withoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3",
          "linkedWithoutMetadata": "a7c33e6f582a23a3badacaf470f6aa515fd4756e85400ba17b89a49c6c1e26f3"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "_settlePayment(address,address,uint256)",
          "_settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "06a62db2f4151528ae89799d8fb43371736050dd4463e972e151eb4c586ddab2",
          "withoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91",
          "linkedWithoutMetadata": "5f1ebd745412b8e7ad1f8a32abc66629c8f871815ceaef656469deba36597e91"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10344_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10367_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10344_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10367_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10323": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10327": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10344_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10323",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10367_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10327",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10305_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10288_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10288_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10305_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10273": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10276": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10288_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10273",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10305_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10276",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10318_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10318_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10308": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10318_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10308",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10269_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10233_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10238_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10238_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10233_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10238_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10233_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10269_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10217": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10224": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10238_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10233_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10269_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10217",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10224",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "e7a21971552c400b89f9105871c4b8284a0a71705bdd03408999d4c1af528e53",
          "withoutMetadata": "a93350175eb552ddf60b497e9c110c99ae11e091c3d50f76a8aaee6cc858c7d6",
          "linkedWithoutMetadata": "a93350175eb552ddf60b497e9c110c99ae11e091c3d50f76a8aaee6cc858c7d6"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9782",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9979",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10130",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10163",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9909",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10202",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9782": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9909": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9979": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10130": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10163": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10202": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10211_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10211_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10211_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "994b60ef15db469b24ed23ed9f4dceaa19f9ce87f47d0d261f7d92f781d7a54f",
          "withoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c",
          "linkedWithoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "_revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "_finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "_updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "522be79a3e78b8ff817cb821f47e0d36e39193c7c236e96a2795ff6ba82dee14",
          "withoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613",
          "linkedWithoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10351_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10374_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10351_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10374_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10330": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10334": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10351_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10330",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10374_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10334",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "55ff48b8a3ddc03be0d7406433e84fd5448555bc172accc5f336bbe77701e7d4",
          "withoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842",
          "linkedWithoutMetadata": "cffcbeca9ea952fc0d5cbba00d1b322ad58351c3bd74bbeb01987b1f60796842"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10312_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10295_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10295_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10312_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10280": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10283": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10295_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10280",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10312_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10283",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "e6007525f2734aeb111dbe931ff941a9284a5246611d9e272bee6a9815faa500",
          "withoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e",
          "linkedWithoutMetadata": "356888e06af375056f3cdead177744766480bd6a455be8ab21dfd94becd6514e"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10325_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10325_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10315": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10325_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10315",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "2f79d52d08c9a5da3755575a8fa4fdd6027c1ea96ced93c1a12e05c99639426a",
          "withoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988",
          "linkedWithoutMetadata": "6812b0d2849839c418f5a2f4a2540bce8e93a57777ffda14348177196a0fa988"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10276_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10240_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10245_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10245_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10240_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10245_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10240_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10276_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10224": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10231": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10245_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10240_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10276_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10224",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10231",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "253153dfcba12c25745ac412c7d8b349da932477b22882d793166b8500066c11",
          "withoutMetadata": "3e4f7a23d22d54177e7e166de1599d34661d566264fe3f3b9d0521e59921a45f",
          "linkedWithoutMetadata": "3e4f7a23d22d54177e7e166de1599d34661d566264fe3f3b9d0521e59921a45f"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getPublicationContributors(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9789",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9986",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10137",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10170",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9916",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10209",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9789": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9916": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9986": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10137": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10170": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10209": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10218_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10218_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10218_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "994b60ef15db469b24ed23ed9f4dceaa19f9ce87f47d0d261f7d92f781d7a54f",
          "withoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c",
          "linkedWithoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "_submitBuyOut(uint256,uint256,address)",
          "_finalizeBuyOutOffer(uint256)",
          "_revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "calcOptimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "calcFutureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "_registerNewLicence(address,uint256,uint256)",
          "_revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "_allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "_addNewLicenceToPublication(uint256)",
          "_revokeLicence(uint256)",
          "_recordDonation(uint256,uint256)",
          "getOwnerAddress(uint256)",
          "getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "getPublicationPricingStrategy(uint256)",
          "getAllPublications(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "522be79a3e78b8ff817cb821f47e0d36e39193c7c236e96a2795ff6ba82dee14",
          "withoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613",
          "linkedWithoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10335_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10358_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10335_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10358_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10314": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10318": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10335_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10314",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10358_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10318",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "81f7be5591ff36cf83ea21b3548376efce943d3f0ab03fa5f52cc9a889095406",
          "withoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98",
          "linkedWithoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10296_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10279_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10279_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10296_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10264": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10267": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10279_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10264",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10296_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10267",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "c300f02089d4b8aacd6559617af76b0f34ff905447bb389e3614eb59a97aa135",
          "withoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db",
          "linkedWithoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10309_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10309_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10299": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10309_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10299",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "f9b45a0c2b1fab1602e0e3bdbb1515926a7a6734d2b7735af300208bc8dc6603",
          "withoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d",
          "linkedWithoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10260_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10224_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10229_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10229_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10224_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10229_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10224_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10260_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10208": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10215": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10229_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10224_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10260_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10208",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10215",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "f68ba2313d8756ed598c39cd014dcd7a27442e96b52c8fa074b0633a7368486f",
          "withoutMetadata": "79ffbc9fd28e2e997cf23aed32416802bd74164e2b79903b8015c8418e39f2fe",
          "linkedWithoutMetadata": "79ffbc9fd28e2e997cf23aed32416802bd74164e2b79903b8015c8418e39f2fe"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "getUserProfileUri(address)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9773",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9970",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10121",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10154",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9900",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10193",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9773": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9900": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9970": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10121": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10154": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10193": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "1fa3d5dc3d08a1c9012139b85641b5315f46ef408dfe52dfecee5d8a23044fec",
          "withoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be",
          "linkedWithoutMetadata": "bb58c2272fd005e150f5356c686df6e032f4037c7fb830e6122aa8947cc4f3be"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10202_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10202_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10202_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "994b60ef15db469b24ed23ed9f4dceaa19f9ce87f47d0d261f7d92f781d7a54f",
          "withoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c",
          "linkedWithoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)",
          "getUserProfileUri(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "522be79a3e78b8ff817cb821f47e0d36e39193c7c236e96a2795ff6ba82dee14",
          "withoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613",
          "linkedWithoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10302_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10325_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10302_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10325_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10281": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10285": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10302_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10281",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10325_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10285",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "81f7be5591ff36cf83ea21b3548376efce943d3f0ab03fa5f52cc9a889095406",
          "withoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98",
          "linkedWithoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10263_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10246_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10246_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10263_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10231": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10234": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10246_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10231",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10263_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10234",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "c300f02089d4b8aacd6559617af76b0f34ff905447bb389e3614eb59a97aa135",
          "withoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db",
          "linkedWithoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10276_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10276_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10266": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10276_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10266",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "f9b45a0c2b1fab1602e0e3bdbb1515926a7a6734d2b7735af300208bc8dc6603",
          "withoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d",
          "linkedWithoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10227_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10191_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10196_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10196_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10191_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10196_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10191_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10227_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10175": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10182": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10196_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10191_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10227_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10175",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10182",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "c75f018ab94a68be885287c95a763b91a9a8a289453412afb83bee8bfe200f83",
          "withoutMetadata": "d9be8ee7bbe1feaa22ab0f524466e0de208066daa0cb7d3093c6858943d8fddf",
          "linkedWithoutMetadata": "d9be8ee7bbe1feaa22ab0f524466e0de208066daa0cb7d3093c6858943d8fddf"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9747",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9944",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10095",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10121",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9874",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10160",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9747": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9874": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9944": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10095": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10121": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10160": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "fae795e2ba8ce1c7bbcc2b2c2ea8580a1ca5c91c115e73e983e96f1dee65f14f",
          "withoutMetadata": "cc1c3dca33cac22023f5a78ce36e88b30b5fb03f44eed2a0a16ebdd2df985491",
          "linkedWithoutMetadata": "cc1c3dca33cac22023f5a78ce36e88b30b5fb03f44eed2a0a16ebdd2df985491"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10169_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10169_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10169_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "994b60ef15db469b24ed23ed9f4dceaa19f9ce87f47d0d261f7d92f781d7a54f",
          "withoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c",
          "linkedWithoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "7d8418cc2df25196f4c33b556d055f0a566bc2e0bd17f4b1fda0bb8598d95fc1",
          "withoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557",
          "linkedWithoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)",
          "upgrade(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/Migrations.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "label": "last_completed_migration",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ICERC20": {
        "src": "contracts/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "a132de9bbf707f040e4214ab96ec0385969101cc8ab430777f15df9af2f3aa7f",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "4e461eefc21ad514a3778bb6f944b33e81b523a75d78768e1d287105f63b03a4",
          "withoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7",
          "linkedWithoutMetadata": "f3c1b07b72917d1ac95e17135bfc3ad4f7d2bd1d5d1a6af56033938670e815b7"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8c9b97a6308ede76a4119c8c15d0b4c6588f907500d8ff7431a743acd0349018",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "cfdd3ddf45cde635058ac819ab3c292f6423831de7c669a8bc7782a656c5acf2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b7378fbae5cfcf63be42d368414359e78b2232cf360b357f7597336163ae772d",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "522be79a3e78b8ff817cb821f47e0d36e39193c7c236e96a2795ff6ba82dee14",
          "withoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613",
          "linkedWithoutMetadata": "170cdd122cf37e280151443595fdc3c87022bb59698c3456c8dcb6289b3f5613"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10302_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10325_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10302_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10325_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10281": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10285": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10302_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10281",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10325_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10285",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "81f7be5591ff36cf83ea21b3548376efce943d3f0ab03fa5f52cc9a889095406",
          "withoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98",
          "linkedWithoutMetadata": "67475e9b7f5d82c1975f31a9aafc2ec8c38b78568ae996d1a2e6048d79408b98"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10263_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10246_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10246_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10263_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10231": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10234": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10246_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10231",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10263_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10234",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "c300f02089d4b8aacd6559617af76b0f34ff905447bb389e3614eb59a97aa135",
          "withoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db",
          "linkedWithoutMetadata": "9b879ee52bee60ba80170485f3adda04493b52a6a523e54879146658871347db"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10276_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10276_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10266": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10276_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10266",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "f9b45a0c2b1fab1602e0e3bdbb1515926a7a6734d2b7735af300208bc8dc6603",
          "withoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d",
          "linkedWithoutMetadata": "59f35fb188eaa8dc7bec5d818f9a732fe9ea5df879b33dcfd11d5b73db293f6d"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10227_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10191_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10196_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10196_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10191_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10196_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10191_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10227_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10175": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10182": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10196_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10191_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10227_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10175",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10182",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "fca0897375ddc9098e95458181ade0b396f37cc182ae7e44d7b689bb371a8e66",
          "withoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af",
          "linkedWithoutMetadata": "31ffcdc49275b8ba88728143bb32597368e33d2aae011b8ce30639f40412f3af"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "c75f018ab94a68be885287c95a763b91a9a8a289453412afb83bee8bfe200f83",
          "withoutMetadata": "d9be8ee7bbe1feaa22ab0f524466e0de208066daa0cb7d3093c6858943d8fddf",
          "linkedWithoutMetadata": "d9be8ee7bbe1feaa22ab0f524466e0de208066daa0cb7d3093c6858943d8fddf"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9747",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9944",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10095",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10121",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9874",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10160",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9747": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9874": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9944": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10095": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10121": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10160": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "fae795e2ba8ce1c7bbcc2b2c2ea8580a1ca5c91c115e73e983e96f1dee65f14f",
          "withoutMetadata": "cc1c3dca33cac22023f5a78ce36e88b30b5fb03f44eed2a0a16ebdd2df985491",
          "linkedWithoutMetadata": "cc1c3dca33cac22023f5a78ce36e88b30b5fb03f44eed2a0a16ebdd2df985491"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3792_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10169_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10169_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3792_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10169_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "994b60ef15db469b24ed23ed9f4dceaa19f9ce87f47d0d261f7d92f781d7a54f",
          "withoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c",
          "linkedWithoutMetadata": "aa5f9053a7ee6f4f2db858868b3c055ffdba7440e80b7d7d5abeb333de153c9c"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:50"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2423",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2423": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "c80389029eba0a201b29e67bc5b5a894080d3b2e24fa16a30b6e1def9fb02094",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "7d8418cc2df25196f4c33b556d055f0a566bc2e0bd17f4b1fda0bb8598d95fc1",
          "withoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557",
          "linkedWithoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)",
          "upgrade(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/Migrations.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "label": "last_completed_migration",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ICERC20": {
        "src": "contracts/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "eea5e1b8660b040a9ac47ba3436582c1ba836437ca51e8da6a33f305514c77f9",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "a67ba1a5cddeeac51f00820c9071e2573aee7d979661cb0d3ec06fc568ffb2a4",
          "withoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0",
          "linkedWithoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b6d72f0b0b4a93ff5de38d234350a2a3cd254a3e8952da951f3a818e357e5998",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "8f03eea833c662ab581d17a8a401be1d0a24d17907e0a0ecca8759e166beed38",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "686c38a85bcae67f8b46518af7751293f29c8b97c74065b3a9e3ae07657ad017",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "6e9cbdb0b7f9ca559d556a77877cc35c6c462c2290b9a31cc60993606942ec4d",
          "withoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7",
          "linkedWithoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10261_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10284_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10261_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10284_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10240": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10244": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10261_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10240",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10284_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10244",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "08f9cec86e4ab669ab58c2d23a9f12ea6740d1c0b3963693203d00b3c4a6b2b9",
          "withoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1",
          "linkedWithoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10222_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10205_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10205_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10222_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10190": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10193": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10205_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10190",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10222_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10193",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "963d5cb991a0ca9758bf75d6a4b86979921d95048a14b2364cfb3d86226efe83",
          "withoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66",
          "linkedWithoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10235_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10235_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10225": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10235_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10225",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "cb6d8c6acbdcb6b634991a633c0c63faf95d2556715a9fa3040fbc9da3b4dace",
          "withoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee",
          "linkedWithoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10186_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10150_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10155_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10155_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10150_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10155_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10150_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10186_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10134": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10141": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10155_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10150_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10186_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10134",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10141",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "40b5d287eb47af8bdf704069208bd9a8cdd0355781c6cdae2f6f18b9a19b3366",
          "withoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a",
          "linkedWithoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:21",
        "version": {
          "withMetadata": "5aca888c44d13619dd8b954619df1d5a49547a7bfc5ff4b8f9654d1d0a8c3202",
          "withoutMetadata": "cb9ba37a269f2d0ebfb6e07b9028c77b48e6faaef92bf1b0dcdf381494f47560",
          "linkedWithoutMetadata": "cb9ba37a269f2d0ebfb6e07b9028c77b48e6faaef92bf1b0dcdf381494f47560"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnicoinRegistry",
            "src": "contracts/UnicoinRegistry.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IAuctionManager)9706",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:23"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(ILicenceManager)9903",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:24"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IPublicationManager)10054",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "104",
              "type": "t_contract(IUserManager)10080",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "105",
              "type": "t_contract(IHarbergerTaxManager)9833",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "106",
              "type": "t_contract(IVault)10119",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9706": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9833": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9903": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10054": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10080": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10119": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "bf49fa28db9e747fc668200f8c3e588222cfa9394b9ccc671aa9fea9f5f27aab",
          "withoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70",
          "linkedWithoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3782_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10128_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10128_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3782_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10128_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "1c4e1e3d579812f5172a7b7ff2f2c71f0e3a352dd11a6e3666bd1907c448cdaf",
          "withoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb",
          "linkedWithoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2414",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2414": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "e90d4d374e9e4279510529c81f627da62ef27f282605f7288a8343a168bda692",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "eea5e1b8660b040a9ac47ba3436582c1ba836437ca51e8da6a33f305514c77f9",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "a67ba1a5cddeeac51f00820c9071e2573aee7d979661cb0d3ec06fc568ffb2a4",
          "withoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0",
          "linkedWithoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b6d72f0b0b4a93ff5de38d234350a2a3cd254a3e8952da951f3a818e357e5998",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "8f03eea833c662ab581d17a8a401be1d0a24d17907e0a0ecca8759e166beed38",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "686c38a85bcae67f8b46518af7751293f29c8b97c74065b3a9e3ae07657ad017",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "6e9cbdb0b7f9ca559d556a77877cc35c6c462c2290b9a31cc60993606942ec4d",
          "withoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7",
          "linkedWithoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10264_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10287_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10264_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10287_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10243": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10247": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10264_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10243",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10287_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10247",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "08f9cec86e4ab669ab58c2d23a9f12ea6740d1c0b3963693203d00b3c4a6b2b9",
          "withoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1",
          "linkedWithoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10225_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10208_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10208_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10225_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10193": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10196": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10208_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10193",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10225_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10196",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "963d5cb991a0ca9758bf75d6a4b86979921d95048a14b2364cfb3d86226efe83",
          "withoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66",
          "linkedWithoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10238_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10238_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10228": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10238_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10228",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "cb6d8c6acbdcb6b634991a633c0c63faf95d2556715a9fa3040fbc9da3b4dace",
          "withoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee",
          "linkedWithoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10189_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10153_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10158_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10158_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10153_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10158_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10153_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10189_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10137": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10144": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10158_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10153_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10189_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10137",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10144",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "40b5d287eb47af8bdf704069208bd9a8cdd0355781c6cdae2f6f18b9a19b3366",
          "withoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a",
          "linkedWithoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:20",
        "version": {
          "withMetadata": "237bb26d930cb1d98ab67d1d858c303e7ccd7b51ae56336c345c662cc6e58951",
          "withoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738",
          "linkedWithoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738"
        },
        "inherit": [
          "Initializable",
          "BaseRelayRecipient",
          "IRelayRecipient"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "versionRecipient()",
          "initialize(address,address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 21,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IAuctionManager)9709",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILicenceManager)9906",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IPublicationManager)10057",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUserManager)10083",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IHarbergerTaxManager)9836",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:29"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IVault)10122",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9709": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9836": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9906": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10057": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10083": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10122": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "bf49fa28db9e747fc668200f8c3e588222cfa9394b9ccc671aa9fea9f5f27aab",
          "withoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70",
          "linkedWithoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3782_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10131_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10131_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3782_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10131_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:13",
        "version": {
          "withMetadata": "1c4e1e3d579812f5172a7b7ff2f2c71f0e3a352dd11a6e3666bd1907c448cdaf",
          "withoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb",
          "linkedWithoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)2414",
              "contract": "Vault",
              "src": "contracts/Vault.sol:14"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)2414": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "e90d4d374e9e4279510529c81f627da62ef27f282605f7288a8343a168bda692",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "6e5beb70ea8cb26cdc878aa7199519716956350a34822b51f2fb04daf4ac972f",
          "withoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557",
          "linkedWithoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)",
          "upgrade(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/Migrations.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "label": "last_completed_migration",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ICERC20": {
        "src": "contracts/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "eea5e1b8660b040a9ac47ba3436582c1ba836437ca51e8da6a33f305514c77f9",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "a67ba1a5cddeeac51f00820c9071e2573aee7d979661cb0d3ec06fc568ffb2a4",
          "withoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0",
          "linkedWithoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b6d72f0b0b4a93ff5de38d234350a2a3cd254a3e8952da951f3a818e357e5998",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "8f03eea833c662ab581d17a8a401be1d0a24d17907e0a0ecca8759e166beed38",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "686c38a85bcae67f8b46518af7751293f29c8b97c74065b3a9e3ae07657ad017",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "6e9cbdb0b7f9ca559d556a77877cc35c6c462c2290b9a31cc60993606942ec4d",
          "withoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7",
          "linkedWithoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10263_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10286_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10263_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10286_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10242": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10246": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10263_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10242",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10286_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10246",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "08f9cec86e4ab669ab58c2d23a9f12ea6740d1c0b3963693203d00b3c4a6b2b9",
          "withoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1",
          "linkedWithoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10224_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10207_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10207_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10224_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10192": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10195": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10207_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10192",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10224_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10195",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "963d5cb991a0ca9758bf75d6a4b86979921d95048a14b2364cfb3d86226efe83",
          "withoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66",
          "linkedWithoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10237_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10237_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10227": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10237_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10227",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "cb6d8c6acbdcb6b634991a633c0c63faf95d2556715a9fa3040fbc9da3b4dace",
          "withoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee",
          "linkedWithoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10188_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10152_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10157_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10157_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10152_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10157_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10152_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10188_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10136": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10143": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10157_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10152_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10188_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10136",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10143",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "40b5d287eb47af8bdf704069208bd9a8cdd0355781c6cdae2f6f18b9a19b3366",
          "withoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a",
          "linkedWithoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:20",
        "version": {
          "withMetadata": "237bb26d930cb1d98ab67d1d858c303e7ccd7b51ae56336c345c662cc6e58951",
          "withoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738",
          "linkedWithoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738"
        },
        "inherit": [
          "Initializable",
          "BaseRelayRecipient",
          "IRelayRecipient"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "versionRecipient()",
          "initialize(address,address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 21,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IAuctionManager)9708",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILicenceManager)9905",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IPublicationManager)10056",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUserManager)10082",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IHarbergerTaxManager)9835",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:29"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IVault)10121",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9708": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9835": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9905": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10056": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10082": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10121": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "bf49fa28db9e747fc668200f8c3e588222cfa9394b9ccc671aa9fea9f5f27aab",
          "withoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70",
          "linkedWithoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3782_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10130_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10130_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3782_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10130_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:12",
        "version": {
          "withMetadata": "b727b486a32a263acd943ee5159cd6d58e31e500030b1129fe9546c73c2977f7",
          "withoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb",
          "linkedWithoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(ERC20Upgradeable)2336",
              "contract": "Vault",
              "src": "contracts/Vault.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20Upgradeable)2336": {
              "label": "contract ERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "e90d4d374e9e4279510529c81f627da62ef27f282605f7288a8343a168bda692",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:5",
        "version": {
          "withMetadata": "6e5beb70ea8cb26cdc878aa7199519716956350a34822b51f2fb04daf4ac972f",
          "withoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557",
          "linkedWithoutMetadata": "ab3a432001f95f5730151b5e3725a94a7ca9ae1cb8c4cd40ed50681066689557"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)",
          "upgrade(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts/Migrations.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:6"
            },
            {
              "label": "last_completed_migration",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Migrations",
              "src": "contracts/Migrations.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ICERC20": {
        "src": "contracts/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BasePaymaster": {
        "src": "@opengsn/contracts/src/BasePaymaster.sol:19",
        "inherit": [
          "Ownable",
          "Context",
          "IPaymaster"
        ],
        "libraries": [
          "GsnEip712Library"
        ],
        "methods": [
          "getHubAddr()",
          "getGasAndDataLimits()",
          "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))",
          "setRelayHub(address)",
          "setTrustedForwarder(address)",
          "trustedForwarder()",
          "getRelayHubDeposit()",
          "()",
          "withdrawRelayHubDepositTo(uint256,address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IForwarder": {
        "src": "@opengsn/contracts/src/forwarder/IForwarder.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNonce(address)",
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)",
          "registerRequestType(string,string)",
          "registerDomainSeparator(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPaymaster": {
        "src": "@opengsn/contracts/src/interfaces/IPaymaster.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGasAndDataLimits()",
          "trustedForwarder()",
          "getHubAddr()",
          "getRelayHubDeposit()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayHub": {
        "src": "@opengsn/contracts/src/interfaces/IRelayHub.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addRelayWorkers(address[])",
          "registerRelayServer(uint256,uint256,string)",
          "depositFor(address)",
          "withdraw(uint256,address payable)",
          "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "penalize(address,address payable)",
          "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "deprecateHub(uint256)",
          "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "getConfiguration()",
          "calldataGasCost(uint256)",
          "workerToManager(address)",
          "workerCount(address)",
          "balanceOf(address)",
          "stakeManager()",
          "penalizer()",
          "isRelayManagerStaked(address)",
          "isDeprecated()",
          "deprecationBlock()",
          "versionHub()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IStakeManager": {
        "src": "@opengsn/contracts/src/interfaces/IStakeManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setRelayManagerOwner(address payable)",
          "stakeForRelayManager(address,uint256)",
          "unlockStake(address)",
          "withdrawStake(address)",
          "authorizeHubByOwner(address,address)",
          "authorizeHubByManager(address)",
          "unauthorizeHubByOwner(address,address)",
          "unauthorizeHubByManager(address)",
          "isRelayManagerStaked(address,address,uint256,uint256)",
          "penalizeRelayManager(address,address payable,uint256)",
          "getStakeInfo(address)",
          "maxUnstakeDelay()",
          "versionSM()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnEip712Library": {
        "src": "@opengsn/contracts/src/utils/GsnEip712Library.sol:14",
        "version": {
          "withMetadata": "e716d6bee85dd6b04a09d53b74e51a9273d6644edd1aa3dedc83d74c79da5f22",
          "withoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5",
          "linkedWithoutMetadata": "8c4867f25e2bfaeeb062ef6e2f838f1adb6ab476676858dbb289ea80dc02c6a5"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnTypes": {
        "src": "@opengsn/contracts/src/utils/GsnTypes.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "GsnUtils": {
        "src": "@opengsn/contracts/src/utils/GsnUtils.sol:7",
        "version": {
          "withMetadata": "ca82bccee44e9e1957e5761dd818926c03117433207f419751e8dec0d86bf466",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "MinLibBytes"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MinLibBytes": {
        "src": "@opengsn/contracts/src/utils/MinLibBytes.sol:7",
        "version": {
          "withMetadata": "73caae9248271d3c4eab9a2e2cfd22c36644e06a1863505dd97ef9a1b8740108",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC2771ContextUpgradeable": {
        "src": "contracts/patches/ERC2771ContextUpgradeable.sol:13",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:15"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "contracts/patches/ERC2771ContextUpgradeable.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "eea5e1b8660b040a9ac47ba3436582c1ba836437ca51e8da6a33f305514c77f9",
          "withoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0",
          "linkedWithoutMetadata": "5bf4b3696db4bd5e291f28393396b1f654594c3c1e77292c3e19a0fe123e98a0"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "a67ba1a5cddeeac51f00820c9071e2573aee7d979661cb0d3ec06fc568ffb2a4",
          "withoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0",
          "linkedWithoutMetadata": "8d00baf05e7e3eab20287d9276c03f17b292f27ceeb76789143252fbcff453a0"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b6d72f0b0b4a93ff5de38d234350a2a3cd254a3e8952da951f3a818e357e5998",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "9c236267353d664ebfd0e52dcd7d7f02dcfd88cc033f73cf8e29f0a8f7f6dfd5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "8f03eea833c662ab581d17a8a401be1d0a24d17907e0a0ecca8759e166beed38",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "686c38a85bcae67f8b46518af7751293f29c8b97c74065b3a9e3ae07657ad017",
          "withoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4",
          "linkedWithoutMetadata": "89968b8d76f515bdb6c9d4cd9ff250315029a1b29432a1259c7ada5ca2e68bf4"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "144abd6c6eb4c94f63674d112843702aad59c9b7c74c9db6327262899d23949d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "17f5c51e2154d3111a7a0d232944629d3f0aaadd425cb28a037a855169067644",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AuctionManager": {
        "src": "contracts/AuctionManager.sol:14",
        "version": {
          "withMetadata": "6e9cbdb0b7f9ca559d556a77877cc35c6c462c2290b9a31cc60993606942ec4d",
          "withoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7",
          "linkedWithoutMetadata": "34f1d5145452aa397d193985c4a26f36de714ffb6c214daf134750bcd52943a7"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IAuctionManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AuctionManager",
            "src": "contracts/AuctionManager.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/AuctionManager.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "auctions",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Auction)10263_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:23"
            },
            {
              "label": "bids",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(Bid)10286_storage)dyn_storage",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:25"
            },
            {
              "label": "bidOwners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AuctionManager",
              "src": "contracts/AuctionManager.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Auction)10263_storage)dyn_storage": {
              "label": "struct SharedStructures.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Bid)10286_storage)dyn_storage": {
              "label": "struct SharedStructures.Bid[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_enum(AuctionStatus)10242": {
              "label": "enum SharedStructures.AuctionStatus",
              "members": [
                "Pending",
                "Commit",
                "Reveal",
                "Finalized"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(BidStatus)10246": {
              "label": "enum SharedStructures.BidStatus",
              "members": [
                "Committed",
                "Revealed",
                "Winner"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)10263_storage": {
              "label": "struct SharedStructures.Auction",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctionFloor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "auctionBidIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "winningBidId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(AuctionStatus)10242",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(Bid)10286_storage": {
              "label": "struct SharedStructures.Bid",
              "members": [
                {
                  "label": "commitBid",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "revealedBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "revealedSalt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(BidStatus)10246",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "auctionId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "bidderAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "HarbergerTaxManager": {
        "src": "contracts/HarbergerTaxManager.sol:12",
        "version": {
          "withMetadata": "08f9cec86e4ab669ab58c2d23a9f12ea6740d1c0b3963693203d00b3c4a6b2b9",
          "withoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1",
          "linkedWithoutMetadata": "6df4a795e4195e927aaba7ffd825a193612593363aa95676943daa3c01352dd1"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IHarbergerTaxManager",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HarbergerTaxManager",
            "src": "contracts/HarbergerTaxManager.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/HarbergerTaxManager.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "taxObjects",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(TaxObject)10224_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:30"
            },
            {
              "label": "buyOuts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_struct(BuyOut)10207_storage)dyn_storage",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:32"
            },
            {
              "label": "licenceTaxObjects",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "HarbergerTaxManager",
              "src": "contracts/HarbergerTaxManager.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(BuyOut)10207_storage)dyn_storage": {
              "label": "struct SharedStructures.BuyOut[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TaxObject)10224_storage)dyn_storage": {
              "label": "struct SharedStructures.TaxObject[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(BuyOutStatus)10192": {
              "label": "enum SharedStructures.BuyOutStatus",
              "members": [
                "Pending",
                "Successful",
                "OutBid"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(TaxObjectStatus)10195": {
              "label": "enum SharedStructures.TaxObjectStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_struct(BuyOut)10207_storage": {
              "label": "struct SharedStructures.BuyOut",
              "members": [
                {
                  "label": "taxObjectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "buyOutOwnerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyOutAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "buyOutExpiration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "status",
                  "type": "t_enum(BuyOutStatus)10192",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TaxObject)10224_storage": {
              "label": "struct SharedStructures.TaxObject",
              "members": [
                {
                  "label": "licenceId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ratePerBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastPayment",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "numberOfOutBids",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentAssignedValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "buyOuts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_enum(TaxObjectStatus)10195",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "LicenceManager": {
        "src": "contracts/LicenceManager.sol:12",
        "version": {
          "withMetadata": "963d5cb991a0ca9758bf75d6a4b86979921d95048a14b2364cfb3d86226efe83",
          "withoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66",
          "linkedWithoutMetadata": "5ef440ab9e20cfd1b9dc213fb63758704a14727c3e55b4738fc1e3517f2edf66"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ILicenceManager",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,string)",
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LicenceManager",
            "src": "contracts/LicenceManager.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/LicenceManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "licences",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_struct(Licence)10237_storage)dyn_storage",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:14"
            },
            {
              "label": "licenceOwners",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:16"
            },
            {
              "label": "publicationLicences",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "LicenceManager",
              "src": "contracts/LicenceManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Licence)10237_storage)dyn_storage": {
              "label": "struct SharedStructures.Licence[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LicenceStatus)10227": {
              "label": "enum SharedStructures.LicenceStatus",
              "members": [
                "Active",
                "Revoked"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Licence)10237_storage": {
              "label": "struct SharedStructures.Licence",
              "members": [
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationLicenceNo",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(LicenceStatus)10227",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PublicationManager": {
        "src": "contracts/PublicationManager.sol:11",
        "version": {
          "withMetadata": "cb6d8c6acbdcb6b634991a633c0c63faf95d2556715a9fa3040fbc9da3b4dace",
          "withoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee",
          "linkedWithoutMetadata": "ed9cbf9fcd70ff964c4b472d8ab7c9ec3f978d6ae1d571429368fe83f2c89aee"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IPublicationManager"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PublicationManager",
            "src": "contracts/PublicationManager.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/PublicationManager.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "publications",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_struct(Publication)10188_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:22"
            },
            {
              "label": "_contributions",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_array(t_struct(Contribution)10152_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:23"
            },
            {
              "label": "_citations",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_array(t_struct(Citation)10157_storage)dyn_storage)dyn_storage",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:24"
            },
            {
              "label": "publicationOwners",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "PublicationManager",
              "src": "contracts/PublicationManager.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_array(t_struct(Citation)10157_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_array(t_struct(Contribution)10152_storage)dyn_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[][]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Citation)10157_storage)dyn_storage": {
              "label": "struct SharedStructures.Citation[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Contribution)10152_storage)dyn_storage": {
              "label": "struct SharedStructures.Contribution[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Publication)10188_storage)dyn_storage": {
              "label": "struct SharedStructures.Publication[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(PricingStrategy)10136": {
              "label": "enum SharedStructures.PricingStrategy",
              "members": [
                "PrivateAuction",
                "FixedRate",
                "PrivateAuctionHarberger",
                "None",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PublicationStatus)10143": {
              "label": "enum SharedStructures.PublicationStatus",
              "members": [
                "Published",
                "Replaced",
                "Withdrawn",
                "Licensed",
                "Unitialized",
                "NULL"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Citation)10157_storage": {
              "label": "struct SharedStructures.Citation",
              "members": [
                {
                  "label": "publicationId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Contribution)10152_storage": {
              "label": "struct SharedStructures.Contribution",
              "members": [
                {
                  "label": "contributorAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "weighting",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lifetimeAllocations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Publication)10188_storage": {
              "label": "struct SharedStructures.Publication",
              "members": [
                {
                  "label": "pricingStrategy",
                  "type": "t_enum(PricingStrategy)10136",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "publicationUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "publicationStatus",
                  "type": "t_enum(PublicationStatus)10143",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ownerAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                },
                {
                  "label": "sellPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxNumberOfLicences",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "licencesIssued",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "previousVersion",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "auctionIds",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "contributionsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "donations",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "citationsId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lifetimeEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinPaymaster": {
        "src": "contracts/UnicoinPaymaster.sol:9",
        "version": {
          "withMetadata": "40b5d287eb47af8bdf704069208bd9a8cdd0355781c6cdae2f6f18b9a19b3366",
          "withoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a",
          "linkedWithoutMetadata": "2fa2e2dae5f14ecdc6ba08ca4a48d05c912854f6ee69e4e9f48584926a80f87a"
        },
        "inherit": [
          "BasePaymaster",
          "Ownable",
          "Context",
          "IPaymaster",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTarget(address)",
          "initialize()",
          "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)",
          "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))",
          "versionPaymaster()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_owner",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "relayHub",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IRelayHub)737",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:21"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "BasePaymaster",
              "src": "@opengsn/contracts/src/BasePaymaster.sol:22"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "UnicoinPaymaster",
              "src": "contracts/UnicoinPaymaster.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRelayHub)737": {
              "label": "contract IRelayHub",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UnicoinRegistry": {
        "src": "contracts/UnicoinRegistry.sol:20",
        "version": {
          "withMetadata": "237bb26d930cb1d98ab67d1d858c303e7ccd7b51ae56336c345c662cc6e58951",
          "withoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738",
          "linkedWithoutMetadata": "a691beb76554c9604a3fab4bcff3e9edf6e454d6c8fac9a3981b854e0889c738"
        },
        "inherit": [
          "Initializable",
          "BaseRelayRecipient",
          "IRelayRecipient"
        ],
        "libraries": [
          "SharedStructures"
        ],
        "methods": [
          "versionRecipient()",
          "initialize(address,address,address,address,address,address,address)",
          "setOwner(address)",
          "registerUser(string)",
          "createPublication(uint8,string,uint256,uint256,uint256,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "commitSealedBid(bytes32,uint256)",
          "revealSealedBid(uint256,uint256,uint256,uint256)",
          "finalizeAuction(uint256)",
          "buyLicenceFixedRate()",
          "claimHarbergerTax(uint256)",
          "updateLicenceHarbergerValuation(uint256,uint256)",
          "createHarbergerBuyOut(uint256,uint256)",
          "finalizeBuyoutOffer(uint256)",
          "getTaxObject(uint256)",
          "getTaxObjectLength()",
          "getMinBuyOutAmount(uint256)",
          "getPublicationsAuthorAddress(address)",
          "getPublicationLicences(uint256)",
          "getBids(address)",
          "getPublicationAuctions(uint256)",
          "getPublicationLength()",
          "getPublication(uint256)",
          "getLicenceForAddress(address)",
          "getLicence(uint256)",
          "donate(uint256,uint256)",
          "isCallerRegistered()",
          "canAddressPay(address,uint256)",
          "getBidderBids(address)",
          "getBlockTime()",
          "getAuctionStatus(uint256)",
          "updateAuctionStartTime(uint256,uint256)",
          "getPublicationBids(uint256)",
          "getBid(uint256)",
          "getPublicationAuctionBidLength(uint256)",
          "ownerOf(uint256)",
          "getOutstandingTax(uint256)",
          "getMinBuyOutPrice(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getMostRecentPublicationLicence(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            },
            {
              "label": "_initialized",
              "offset": 20,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 21,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "auctionManager",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IAuctionManager)9708",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:25"
            },
            {
              "label": "licenceManager",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILicenceManager)9905",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:26"
            },
            {
              "label": "publicationManager",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IPublicationManager)10056",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:27"
            },
            {
              "label": "userManager",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IUserManager)10082",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:28"
            },
            {
              "label": "harbergerTaxManager",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IHarbergerTaxManager)9835",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:29"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IVault)10121",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:30"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "UnicoinRegistry",
              "src": "contracts/UnicoinRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IAuctionManager)9708": {
              "label": "contract IAuctionManager",
              "numberOfBytes": "20"
            },
            "t_contract(IHarbergerTaxManager)9835": {
              "label": "contract IHarbergerTaxManager",
              "numberOfBytes": "20"
            },
            "t_contract(ILicenceManager)9905": {
              "label": "contract ILicenceManager",
              "numberOfBytes": "20"
            },
            "t_contract(IPublicationManager)10056": {
              "label": "contract IPublicationManager",
              "numberOfBytes": "20"
            },
            "t_contract(IUserManager)10082": {
              "label": "contract IUserManager",
              "numberOfBytes": "20"
            },
            "t_contract(IVault)10121": {
              "label": "contract IVault",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UserManager": {
        "src": "contracts/UserManager.sol:14",
        "version": {
          "withMetadata": "bf49fa28db9e747fc668200f8c3e588222cfa9394b9ccc671aa9fea9f5f27aab",
          "withoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70",
          "linkedWithoutMetadata": "71f32c46beb31be0abd82f08e6505fe2834ce360b26604703623ec0dc8edce70"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IUserManager",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SharedStructures"
        ],
        "methods": [
          "(address,address)",
          "initialize()",
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserManager",
            "src": "contracts/UserManager.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/UserManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "_userIds",
              "offset": 0,
              "slot": "101",
              "type": "t_struct(Counter)3782_storage",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:20"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_address,t_struct(User)10130_storage)",
              "contract": "UserManager",
              "src": "contracts/UserManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)10130_storage)": {
              "label": "mapping(address => struct SharedStructures.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3782_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)10130_storage": {
              "label": "struct SharedStructures.User",
              "members": [
                {
                  "label": "valid",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "userId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "profileUri",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vault": {
        "src": "contracts/Vault.sol:12",
        "version": {
          "withMetadata": "b727b486a32a263acd943ee5159cd6d58e31e500030b1129fe9546c73c2977f7",
          "withoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb",
          "linkedWithoutMetadata": "16cce4675d3de4380d5316317d9fe80c725885af0683c731073e50399b82f7fb"
        },
        "inherit": [
          "ERC2771ContextUpgradeable",
          "ContextUpgradeable",
          "IVault",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "initialize(address)",
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/Vault.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_registry",
            "src": "contracts/Vault.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2771ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:49"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(ERC20Upgradeable)2336",
              "contract": "Vault",
              "src": "contracts/Vault.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20Upgradeable)2336": {
              "label": "contract ERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IAuctionManager": {
        "src": "contracts/interfaces/IAuctionManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createAuction(uint256,uint256,uint256,uint256)",
          "_commitSealedBid(bytes32,uint256,address)",
          "revealSealedBid(uint256,uint256,uint256,uint256,address)",
          "finalizeAuction(uint256)",
          "getAuctionStatus(uint256)",
          "getBidderBids(address)",
          "updateAuctionStartTime(uint256,uint256)",
          "getAuctionBids(uint256)",
          "getBid(uint256)",
          "getNumberOfBidsInAuction(uint256)",
          "getAuction(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IHarbergerTaxManager": {
        "src": "contracts/interfaces/IHarbergerTaxManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createTaxObject(uint256,uint256)",
          "calculateOutstandingTax(uint256)",
          "calculateMinBuyOutPrice(uint256)",
          "_updateTaxObjectLastPayment(uint256)",
          "_updateTaxObjectValuation(uint256,uint256)",
          "submitBuyOut(uint256,uint256,address)",
          "finalizeBuyOutOffer(uint256)",
          "revokeTaxObject(uint256)",
          "getLicenceTaxObjectId(uint256)",
          "getTaxObject(uint256)",
          "getBuyOutLicenceId(uint256)",
          "getBuyOutOwnerAddress(uint256)",
          "getTaxObjectLength()",
          "optimalExp(uint256)",
          "capFunction(uint256,uint256,uint256)",
          "futureValue(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ILicenceManager": {
        "src": "contracts/interfaces/ILicenceManager.sol:9",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "registerNewLicence(address,uint256,uint256)",
          "revokeLicence(uint256)",
          "getLicenceForUser(address)",
          "allocateLicenceToNewOwner(uint256,address,address)",
          "getLicence(uint256)",
          "getLicenceOwnerAddress(uint256)",
          "getPublicationLicences(uint256)",
          "getMostRecentPublicationLicence(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPublicationManager": {
        "src": "contracts/interfaces/IPublicationManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_createPublication(uint8,string,address,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_replacePublication(uint256,uint8,string,uint256,uint8,struct SharedStructures.Contribution[],struct SharedStructures.Citation[])",
          "_changeOwner(uint256,address)",
          "_addAuctionToPublication(uint256,uint256)",
          "addNewLicenceToPublication(uint256)",
          "revokeLicence(uint256)",
          "getOwnerAddress(uint256)",
          "_getContributors(uint256)",
          "getLatestAuctionId(uint256)",
          "getPublication(uint256)",
          "getPublicationLength()",
          "getPublicationAuctions(uint256)",
          "GetPublicationPricingStrategy(uint256)",
          "getAllPublications(address)",
          "recordDonation(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUserManager": {
        "src": "contracts/interfaces/IUserManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "_registerUser(string,address)",
          "isAddressRegistered(address)",
          "getUserId(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IVault": {
        "src": "contracts/interfaces/IVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canAddressPay(address,uint256)",
          "settlePayment(address,address,uint256)",
          "settleBulkPayment(address,address,struct SharedStructures.Contribution[],uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SharedStructures": {
        "src": "contracts/library/SharedStructures.sol:5",
        "version": {
          "withMetadata": "e90d4d374e9e4279510529c81f627da62ef27f282605f7288a8343a168bda692",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Mock": {
        "src": "contracts/mocks/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "withoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25",
          "linkedWithoutMetadata": "1ebd2e66d1e0777d6024d5230430846f6c1af563649dec0c709d916b26030f25"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mocks/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    }
  ]
}