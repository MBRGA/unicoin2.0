/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UnicoinRegistryContract
  extends Truffle.Contract<UnicoinRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UnicoinRegistryInstance>;
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

type AllEvents = Initialized;

export interface UnicoinRegistryInstance extends Truffle.ContractInstance {
  /**
   * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
   */
  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (
      _auctionManager: string,
      _licenceManager: string,
      _publicationManager: string,
      _userManager: string,
      _harbergerTaxManager: string,
      _vault: string,
      _forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionManager: string,
      _licenceManager: string,
      _publicationManager: string,
      _userManager: string,
      _harbergerTaxManager: string,
      _vault: string,
      _forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _auctionManager: string,
      _licenceManager: string,
      _publicationManager: string,
      _userManager: string,
      _harbergerTaxManager: string,
      _vault: string,
      _forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionManager: string,
      _licenceManager: string,
      _publicationManager: string,
      _userManager: string,
      _harbergerTaxManager: string,
      _vault: string,
      _forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setOwner: {
    (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_owner: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerUser: {
    (_profileUri: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _profileUri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _profileUri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _profileUri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createPublication: {
    (
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      _contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      _contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      _contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      _contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  commitSealedBid: {
    (
      _bidHash: string,
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bidHash: string,
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bidHash: string,
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bidHash: string,
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revealSealedBid: {
    (
      _bid: number | BN | string,
      _salt: number | BN | string,
      _publicationId: number | BN | string,
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _publicationId: number | BN | string,
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _publicationId: number | BN | string,
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _publicationId: number | BN | string,
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizeAuction: {
    (
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyLicenceFixedRate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimHarbergerTax: {
    (
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateLicenceHarbergerValuation: {
    (
      _licenceId: number | BN | string,
      _newValuation: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _licenceId: number | BN | string,
      _newValuation: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _licenceId: number | BN | string,
      _newValuation: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _licenceId: number | BN | string,
      _newValuation: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createHarbergerBuyOut: {
    (
      _licenceId: number | BN | string,
      _buyOutAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _licenceId: number | BN | string,
      _buyOutAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _licenceId: number | BN | string,
      _buyOutAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _licenceId: number | BN | string,
      _buyOutAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizeBuyoutOffer: {
    (
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTaxObject(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    licenceId: BN;
    ratePerBlock: BN;
    lastPayment: BN;
    numberOfOutBids: BN;
    currentAssignedValue: BN;
    buyOuts: BN[];
    status: BN;
  }>;

  getTaxObjectLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getMinBuyOutAmount(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPublicationsAuthorAddress(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getPublicationLicences(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getBids(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getPublicationAuctions(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPublication(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    pricingStrategy: BN;
    publicationUri: string;
    publicationStatus: BN;
    ownerAddress: string;
    sellPrice: BN;
    maxNumberOfLicences: BN;
    licencesIssued: BN;
    previousVersion: BN;
    auctionIds: BN[];
    contributionsId: BN;
    donations: BN[];
    citationsId: BN;
    lifetimeEarnings: BN;
  }>;

  getLicenceForAddress(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getLicence(
    _licenceId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    ownerAddress: string;
    publicationId: BN;
    publicationLicenceNo: BN;
    status: BN;
  }>;

  donate: {
    (
      _publicationId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isCallerRegistered(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  canAddressPay(
    userAddress: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getBidderBids(
    bidderAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getBlockTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAuctionStatus: {
    (
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateAuctionStartTime: {
    (
      _publicationId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPublicationBids(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getBid(
    _bidId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    commitBid: string;
    revealedBid: BN;
    revealedSalt: BN;
    status: BN;
    publicationId: BN;
    auctionId: BN;
    bidderAddress: string;
  }>;

  getPublicationAuctionBidLength(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getOutstandingTax(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMinBuyOutPrice(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getLicenceTaxObjectId(
    _licenceId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMostRecentPublicationLicence(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAuction(
    _auctionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    publicationId: BN;
    auctionFloor: BN;
    startingTime: BN;
    duration: BN;
    auctionBidIds: BN[];
    winningBidId: BN;
    status: BN;
  }>;

  methods: {
    /**
     * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
     */
    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialize: {
      (
        _auctionManager: string,
        _licenceManager: string,
        _publicationManager: string,
        _userManager: string,
        _harbergerTaxManager: string,
        _vault: string,
        _forwarder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionManager: string,
        _licenceManager: string,
        _publicationManager: string,
        _userManager: string,
        _harbergerTaxManager: string,
        _vault: string,
        _forwarder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _auctionManager: string,
        _licenceManager: string,
        _publicationManager: string,
        _userManager: string,
        _harbergerTaxManager: string,
        _vault: string,
        _forwarder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionManager: string,
        _licenceManager: string,
        _publicationManager: string,
        _userManager: string,
        _harbergerTaxManager: string,
        _vault: string,
        _forwarder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setOwner: {
      (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    registerUser: {
      (_profileUri: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _profileUri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _profileUri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _profileUri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createPublication: {
      (
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        _contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        _contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        _contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        _contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    commitSealedBid: {
      (
        _bidHash: string,
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bidHash: string,
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bidHash: string,
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bidHash: string,
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revealSealedBid: {
      (
        _bid: number | BN | string,
        _salt: number | BN | string,
        _publicationId: number | BN | string,
        _bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _publicationId: number | BN | string,
        _bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _publicationId: number | BN | string,
        _bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _publicationId: number | BN | string,
        _bidId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalizeAuction: {
      (
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyLicenceFixedRate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    claimHarbergerTax: {
      (
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateLicenceHarbergerValuation: {
      (
        _licenceId: number | BN | string,
        _newValuation: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _licenceId: number | BN | string,
        _newValuation: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _licenceId: number | BN | string,
        _newValuation: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _licenceId: number | BN | string,
        _newValuation: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createHarbergerBuyOut: {
      (
        _licenceId: number | BN | string,
        _buyOutAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _licenceId: number | BN | string,
        _buyOutAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _licenceId: number | BN | string,
        _buyOutAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _licenceId: number | BN | string,
        _buyOutAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalizeBuyoutOffer: {
      (
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTaxObject(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      licenceId: BN;
      ratePerBlock: BN;
      lastPayment: BN;
      numberOfOutBids: BN;
      currentAssignedValue: BN;
      buyOuts: BN[];
      status: BN;
    }>;

    getTaxObjectLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getMinBuyOutAmount(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPublicationsAuthorAddress(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getPublicationLicences(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getBids(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getPublicationAuctions(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getPublication(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      pricingStrategy: BN;
      publicationUri: string;
      publicationStatus: BN;
      ownerAddress: string;
      sellPrice: BN;
      maxNumberOfLicences: BN;
      licencesIssued: BN;
      previousVersion: BN;
      auctionIds: BN[];
      contributionsId: BN;
      donations: BN[];
      citationsId: BN;
      lifetimeEarnings: BN;
    }>;

    getLicenceForAddress(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getLicence(
      _licenceId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      ownerAddress: string;
      publicationId: BN;
      publicationLicenceNo: BN;
      status: BN;
    }>;

    donate: {
      (
        _publicationId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isCallerRegistered(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    canAddressPay(
      userAddress: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getBidderBids(
      bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getBlockTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAuctionStatus: {
      (
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateAuctionStartTime: {
      (
        _publicationId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPublicationBids(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getBid(
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      commitBid: string;
      revealedBid: BN;
      revealedSalt: BN;
      status: BN;
      publicationId: BN;
      auctionId: BN;
      bidderAddress: string;
    }>;

    getPublicationAuctionBidLength(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    ownerOf(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getOutstandingTax(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getMinBuyOutPrice(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getLicenceTaxObjectId(
      _licenceId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getMostRecentPublicationLicence(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAuction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      publicationId: BN;
      auctionFloor: BN;
      startingTime: BN;
      duration: BN;
      auctionBidIds: BN[];
      winningBidId: BN;
      status: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
