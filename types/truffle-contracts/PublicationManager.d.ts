/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PublicationManagerContract
  extends Truffle.Contract<PublicationManagerInstance> {
  "new"(
    unicoinRegistry: string,
    trustedForwarder: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PublicationManagerInstance>;
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

export interface NewPublication {
  name: "NewPublication";
  args: {
    _publisherAddress: string;
    _publicationUri: string;
    _pricingStrategy: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface PublicationOwnerUpdated {
  name: "PublicationOwnerUpdated";
  args: {
    oldOwner: string;
    newOwner: string;
    oldPubId: BN;
    newPubId: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface PublicationUpdated {
  name: "PublicationUpdated";
  args: {
    _ownerId: string;
    oldPubId: BN;
    newPubId: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | Initialized
  | NewPublication
  | PublicationOwnerUpdated
  | PublicationUpdated;

export interface PublicationManagerInstance extends Truffle.ContractInstance {
  _citations(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  _contributions(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: BN; 3: BN }>;

  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  publicationOwners(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  publications(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
    10: BN;
  }>;

  _createPublication: {
    (
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _ownerAddress: string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _ownerAddress: string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _ownerAddress: string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pricingStrategy: number | BN | string,
      _publicationUri: string,
      _ownerAddress: string,
      _fixedSellPrice: number | BN | string,
      _maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _replacePublication: {
    (
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Replaces a publication with a new version, with a change in ownership
   * @param newOwner The address of the new owner of the publication
   * @param publicationId The publication being updated
   */
  _changeOwner: {
    (
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _addAuctionToPublication: {
    (
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addNewLicenceToPublication: {
    (
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeLicence: {
    (
      _publication_Id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publication_Id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publication_Id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publication_Id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getOwnerAddress(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _getContributors(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      contributorAddress: string;
      weighting: BN;
      balance: BN;
      lifetimeAllocations: BN;
    }[]
  >;

  getLatestAuctionId(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPublication(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    pricingStrategy: BN;
    publicationUri: string;
    publicationStatus: BN;
    ownerAddress: string;
    sellPrice: BN;
    maxNumberOfLicences: BN;
    licencesIssued: BN;
    previousVersion: BN;
    auctionIds: BN[];
    contributionsId: BN;
    donations: BN[];
    citationsId: BN;
    lifetimeEarnings: BN;
  }>;

  getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPublicationAuctions(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  GetPublicationPricingStrategy(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAllPublications(
    _publisherAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  recordDonation: {
    (
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _citations(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    _contributions(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: BN; 3: BN }>;

    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    publicationOwners(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    publications(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: BN;
      3: string;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
      9: BN;
      10: BN;
    }>;

    _createPublication: {
      (
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _ownerAddress: string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _ownerAddress: string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _ownerAddress: string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pricingStrategy: number | BN | string,
        _publicationUri: string,
        _ownerAddress: string,
        _fixedSellPrice: number | BN | string,
        _maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _replacePublication: {
      (
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Replaces a publication with a new version, with a change in ownership
     * @param newOwner The address of the new owner of the publication
     * @param publicationId The publication being updated
     */
    _changeOwner: {
      (
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _addAuctionToPublication: {
      (
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addNewLicenceToPublication: {
      (
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revokeLicence: {
      (
        _publication_Id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publication_Id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publication_Id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publication_Id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getOwnerAddress(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _getContributors(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        contributorAddress: string;
        weighting: BN;
        balance: BN;
        lifetimeAllocations: BN;
      }[]
    >;

    getLatestAuctionId(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPublication(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      pricingStrategy: BN;
      publicationUri: string;
      publicationStatus: BN;
      ownerAddress: string;
      sellPrice: BN;
      maxNumberOfLicences: BN;
      licencesIssued: BN;
      previousVersion: BN;
      auctionIds: BN[];
      contributionsId: BN;
      donations: BN[];
      citationsId: BN;
      lifetimeEarnings: BN;
    }>;

    getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getPublicationAuctions(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    GetPublicationPricingStrategy(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAllPublications(
      _publisherAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    recordDonation: {
      (
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
