/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPublicationManagerContract
  extends Truffle.Contract<IPublicationManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IPublicationManagerInstance>;
}

type AllEvents = never;

export interface IPublicationManagerInstance extends Truffle.ContractInstance {
  _createPublication: {
    (
      pricingStrategy: number | BN | string,
      publicationUri: string,
      ownerAddress: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      pricingStrategy: number | BN | string,
      publicationUri: string,
      ownerAddress: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      pricingStrategy: number | BN | string,
      publicationUri: string,
      ownerAddress: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pricingStrategy: number | BN | string,
      publicationUri: string,
      ownerAddress: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _replacePublication: {
    (
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      publicationId: number | BN | string,
      pricingStrategy: number | BN | string,
      publicationUri: string,
      fixedSellPrice: number | BN | string,
      maxNumberOfLicences: number | BN | string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      citations: {
        publicationId: number | BN | string;
        weighting: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Replaces a publication with a new version, with a change in ownership
   * @param newOwner The address of the new owner of the publication
   * @param publicationId The publication being updated
   */
  _changeOwner: {
    (
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      publicationId: number | BN | string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _addAuctionToPublication: {
    (
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addNewLicenceToPublication: {
    (
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeLicence: {
    (
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getOwnerAddress(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _getContributors(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      contributorAddress: string;
      weighting: BN;
      balance: BN;
      lifetimeAllocations: BN;
    }[]
  >;

  getLatestAuctionId(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPublication(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    pricingStrategy: BN;
    publicationUri: string;
    publicationStatus: BN;
    ownerAddress: string;
    sellPrice: BN;
    maxNumberOfLicences: BN;
    licencesIssued: BN;
    previousVersion: BN;
    auctionIds: BN[];
    contributionsId: BN;
    donations: BN[];
    citationsId: BN;
    lifetimeEarnings: BN;
  }>;

  getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPublicationAuctions(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  GetPublicationPricingStrategy(
    _publicationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAllPublications(
    _publisherAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  recordDonation: {
    (
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _donationAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _createPublication: {
      (
        pricingStrategy: number | BN | string,
        publicationUri: string,
        ownerAddress: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        pricingStrategy: number | BN | string,
        publicationUri: string,
        ownerAddress: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        pricingStrategy: number | BN | string,
        publicationUri: string,
        ownerAddress: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pricingStrategy: number | BN | string,
        publicationUri: string,
        ownerAddress: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _replacePublication: {
      (
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        publicationId: number | BN | string,
        pricingStrategy: number | BN | string,
        publicationUri: string,
        fixedSellPrice: number | BN | string,
        maxNumberOfLicences: number | BN | string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        citations: {
          publicationId: number | BN | string;
          weighting: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Replaces a publication with a new version, with a change in ownership
     * @param newOwner The address of the new owner of the publication
     * @param publicationId The publication being updated
     */
    _changeOwner: {
      (
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        publicationId: number | BN | string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _addAuctionToPublication: {
      (
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addNewLicenceToPublication: {
      (
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revokeLicence: {
      (
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getOwnerAddress(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _getContributors(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        contributorAddress: string;
        weighting: BN;
        balance: BN;
        lifetimeAllocations: BN;
      }[]
    >;

    getLatestAuctionId(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPublication(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      pricingStrategy: BN;
      publicationUri: string;
      publicationStatus: BN;
      ownerAddress: string;
      sellPrice: BN;
      maxNumberOfLicences: BN;
      licencesIssued: BN;
      previousVersion: BN;
      auctionIds: BN[];
      contributionsId: BN;
      donations: BN[];
      citationsId: BN;
      lifetimeEarnings: BN;
    }>;

    getPublicationLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getPublicationAuctions(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    GetPublicationPricingStrategy(
      _publicationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAllPublications(
      _publisherAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    recordDonation: {
      (
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _donationAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
