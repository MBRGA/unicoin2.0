/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface HarbergerTaxManagerContract
  extends Truffle.Contract<HarbergerTaxManagerInstance> {
  "new"(
    registry: string,
    trustedForwarder: string,
    meta?: Truffle.TransactionDetails
  ): Promise<HarbergerTaxManagerInstance>;
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

type AllEvents = Initialized;

export interface HarbergerTaxManagerInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  licenceTaxObjects(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Creates a new Harberger Tax associated with a given licence
   * @param _currentAssignedValue The current Harberger Tax valuation of the licence
   * @param _licenceId The licence with which to associate this tax
   */
  createTaxObject: {
    (
      _licenceId: number | BN | string,
      _currentAssignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _licenceId: number | BN | string,
      _currentAssignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _licenceId: number | BN | string,
      _currentAssignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _licenceId: number | BN | string,
      _currentAssignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Calculates the amount of Harberger tax due on a licence
   * @param _taxObjectId The valuation object on which the tax is to be calculated
   */
  calculateOutstandingTax(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateMinBuyOutPrice(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _updateTaxObjectLastPayment: {
    (
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates the valuation associated with the current Harberger Tax
   * @param _assignedValue The new value to be used for taxing this licence
   * @param _taxObjectId ID of the Tax object
   */
  _updateTaxObjectValuation: {
    (
      _taxObjectId: number | BN | string,
      _assignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _taxObjectId: number | BN | string,
      _assignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _taxObjectId: number | BN | string,
      _assignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _taxObjectId: number | BN | string,
      _assignedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * buyOutId The ID of the newly created buyout offer
   * Issue a bid to buy out a licence under Harberger Tax rules
   * @param _buyOutOwnerAddress The ID of the entity making the buyout offer.
   * @param _offer The buyout amount - must be greater the minimum buyout amount based on current valuation
   */
  submitBuyOut: {
    (
      _taxObjectId: number | BN | string,
      _offer: number | BN | string,
      _buyOutOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _taxObjectId: number | BN | string,
      _offer: number | BN | string,
      _buyOutOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _taxObjectId: number | BN | string,
      _offer: number | BN | string,
      _buyOutOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _taxObjectId: number | BN | string,
      _offer: number | BN | string,
      _buyOutOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Only valid for Pending buyouts, and where the buyout outbidding window has closed.
   * Called by the Unicoin registry to perform the finalisation steps of a buy out
   * @param _buyOutId The ID of the buyout being finalised
   */
  finalizeBuyOutOffer: {
    (
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeTaxObject: {
    (
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLicenceTaxObjectId(
    _licenceId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTaxObject(
    _taxObjectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    licenceId: BN;
    ratePerBlock: BN;
    lastPayment: BN;
    numberOfOutBids: BN;
    currentAssignedValue: BN;
    buyOuts: BN[];
    status: BN;
  }>;

  getBuyOutLicenceId(
    _buyOutId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getBuyOutOwnerAddress(
    _buyOutId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTaxObjectLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * computes e ^ (x / FIXED_1) * FIXED_1 input range: 0 <= x <= OPT_EXP_MAX_VAL - 1 Detailed description: - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible - The exponentiation of each binary exponent is given (pre-calculated) - The exponentiation of r is calculated via Taylor series for e^x, where x = r - The exponentiation of the input is calculated by multiplying the intermediate results above - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859
   */
  optimalExp(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  capFunction(
    r: number | BN | string,
    t1: number | BN | string,
    t2: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  futureValue(
    N: number | BN | string,
    r: number | BN | string,
    t1: number | BN | string,
    t2: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    licenceTaxObjects(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Creates a new Harberger Tax associated with a given licence
     * @param _currentAssignedValue The current Harberger Tax valuation of the licence
     * @param _licenceId The licence with which to associate this tax
     */
    createTaxObject: {
      (
        _licenceId: number | BN | string,
        _currentAssignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _licenceId: number | BN | string,
        _currentAssignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _licenceId: number | BN | string,
        _currentAssignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _licenceId: number | BN | string,
        _currentAssignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Calculates the amount of Harberger tax due on a licence
     * @param _taxObjectId The valuation object on which the tax is to be calculated
     */
    calculateOutstandingTax(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateMinBuyOutPrice(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    _updateTaxObjectLastPayment: {
      (
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates the valuation associated with the current Harberger Tax
     * @param _assignedValue The new value to be used for taxing this licence
     * @param _taxObjectId ID of the Tax object
     */
    _updateTaxObjectValuation: {
      (
        _taxObjectId: number | BN | string,
        _assignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _taxObjectId: number | BN | string,
        _assignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _taxObjectId: number | BN | string,
        _assignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _taxObjectId: number | BN | string,
        _assignedValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * buyOutId The ID of the newly created buyout offer
     * Issue a bid to buy out a licence under Harberger Tax rules
     * @param _buyOutOwnerAddress The ID of the entity making the buyout offer.
     * @param _offer The buyout amount - must be greater the minimum buyout amount based on current valuation
     */
    submitBuyOut: {
      (
        _taxObjectId: number | BN | string,
        _offer: number | BN | string,
        _buyOutOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _taxObjectId: number | BN | string,
        _offer: number | BN | string,
        _buyOutOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _taxObjectId: number | BN | string,
        _offer: number | BN | string,
        _buyOutOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _taxObjectId: number | BN | string,
        _offer: number | BN | string,
        _buyOutOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Only valid for Pending buyouts, and where the buyout outbidding window has closed.
     * Called by the Unicoin registry to perform the finalisation steps of a buy out
     * @param _buyOutId The ID of the buyout being finalised
     */
    finalizeBuyOutOffer: {
      (
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _buyOutId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revokeTaxObject: {
      (
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _taxObjectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLicenceTaxObjectId(
      _licenceId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTaxObject(
      _taxObjectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      licenceId: BN;
      ratePerBlock: BN;
      lastPayment: BN;
      numberOfOutBids: BN;
      currentAssignedValue: BN;
      buyOuts: BN[];
      status: BN;
    }>;

    getBuyOutLicenceId(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getBuyOutOwnerAddress(
      _buyOutId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getTaxObjectLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * computes e ^ (x / FIXED_1) * FIXED_1 input range: 0 <= x <= OPT_EXP_MAX_VAL - 1 Detailed description: - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible - The exponentiation of each binary exponent is given (pre-calculated) - The exponentiation of r is calculated via Taylor series for e^x, where x = r - The exponentiation of the input is calculated by multiplying the intermediate results above - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859
     */
    optimalExp(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    capFunction(
      r: number | BN | string,
      t1: number | BN | string,
      t2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    futureValue(
      N: number | BN | string,
      r: number | BN | string,
      t1: number | BN | string,
      t2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
