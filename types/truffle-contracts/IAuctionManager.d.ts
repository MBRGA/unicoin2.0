/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IAuctionManagerContract
  extends Truffle.Contract<IAuctionManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAuctionManagerInstance>;
}

type AllEvents = never;

export interface IAuctionManagerInstance extends Truffle.ContractInstance {
  _createAuction: {
    (
      _publicationId: number | BN | string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _publicationId: number | BN | string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _publicationId: number | BN | string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _publicationId: number | BN | string,
      _auctionFloor: number | BN | string,
      _auctionStartTime: number | BN | string,
      _auctionDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _commitSealedBid: {
    (
      _bidHash: string,
      _auctionId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bidHash: string,
      _auctionId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bidHash: string,
      _auctionId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bidHash: string,
      _auctionId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revealSealedBid: {
    (
      _bid: number | BN | string,
      _salt: number | BN | string,
      _auctionId: number | BN | string,
      _bidId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _auctionId: number | BN | string,
      _bidId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _auctionId: number | BN | string,
      _bidId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bid: number | BN | string,
      _salt: number | BN | string,
      _auctionId: number | BN | string,
      _bidId: number | BN | string,
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizeAuction: {
    (
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ winningAmount: BN; winnerAddress: string; publicationId: BN }>;
    sendTransaction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAuctionStatus: {
    (
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBidderBids(
    _bidderAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  updateAuctionStartTime: {
    (
      _auctionId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _auctionId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _auctionId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _auctionId: number | BN | string,
      _newStartTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAuctionBids(
    _auctionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getBid(
    _bidId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    commitBid: string;
    revealedBid: BN;
    revealedSalt: BN;
    status: BN;
    publicationId: BN;
    auctionId: BN;
    bidderAddress: string;
  }>;

  getNumberOfBidsInAuction(
    _auctionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAuction(
    _auctionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    publicationId: BN;
    auctionFloor: BN;
    startingTime: BN;
    duration: BN;
    auctionBidIds: BN[];
    winningBidId: BN;
    status: BN;
  }>;

  methods: {
    _createAuction: {
      (
        _publicationId: number | BN | string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _publicationId: number | BN | string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _publicationId: number | BN | string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _publicationId: number | BN | string,
        _auctionFloor: number | BN | string,
        _auctionStartTime: number | BN | string,
        _auctionDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _commitSealedBid: {
      (
        _bidHash: string,
        _auctionId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bidHash: string,
        _auctionId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bidHash: string,
        _auctionId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bidHash: string,
        _auctionId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revealSealedBid: {
      (
        _bid: number | BN | string,
        _salt: number | BN | string,
        _auctionId: number | BN | string,
        _bidId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _auctionId: number | BN | string,
        _bidId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _auctionId: number | BN | string,
        _bidId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bid: number | BN | string,
        _salt: number | BN | string,
        _auctionId: number | BN | string,
        _bidId: number | BN | string,
        _bidderAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalizeAuction: {
      (
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        winningAmount: BN;
        winnerAddress: string;
        publicationId: BN;
      }>;
      sendTransaction(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAuctionStatus: {
      (
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBidderBids(
      _bidderAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    updateAuctionStartTime: {
      (
        _auctionId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _auctionId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _auctionId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _auctionId: number | BN | string,
        _newStartTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAuctionBids(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getBid(
      _bidId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      commitBid: string;
      revealedBid: BN;
      revealedSalt: BN;
      status: BN;
      publicationId: BN;
      auctionId: BN;
      bidderAddress: string;
    }>;

    getNumberOfBidsInAuction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAuction(
      _auctionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      publicationId: BN;
      auctionFloor: BN;
      startingTime: BN;
      duration: BN;
      auctionBidIds: BN[];
      winningBidId: BN;
      status: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
