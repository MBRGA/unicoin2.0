/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VaultContract extends Truffle.Contract<VaultInstance> {
  "new"(
    unicoinRegistry: string,
    trustedForwarder: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VaultInstance>;
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

type AllEvents = Initialized;

export interface VaultInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialize: {
    (_tokenAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canAddressPay(
    _address: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  settlePayment: {
    (
      _sender: string,
      _receiver: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _sender: string,
      _receiver: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _sender: string,
      _receiver: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _sender: string,
      _receiver: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  settleBulkPayment: {
    (
      _sender: string,
      _ownerAddress: string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _paymentAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _sender: string,
      _ownerAddress: string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _paymentAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _sender: string,
      _ownerAddress: string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _paymentAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _sender: string,
      _ownerAddress: string,
      contributors: {
        contributorAddress: string;
        weighting: number | BN | string;
        balance: number | BN | string;
        lifetimeAllocations: number | BN | string;
      }[],
      _paymentAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    initialize: {
      (_tokenAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    canAddressPay(
      _address: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    settlePayment: {
      (
        _sender: string,
        _receiver: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _sender: string,
        _receiver: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _sender: string,
        _receiver: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _sender: string,
        _receiver: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    settleBulkPayment: {
      (
        _sender: string,
        _ownerAddress: string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _paymentAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _sender: string,
        _ownerAddress: string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _paymentAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _sender: string,
        _ownerAddress: string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _paymentAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _sender: string,
        _ownerAddress: string,
        contributors: {
          contributorAddress: string;
          weighting: number | BN | string;
          balance: number | BN | string;
          lifetimeAllocations: number | BN | string;
        }[],
        _paymentAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
